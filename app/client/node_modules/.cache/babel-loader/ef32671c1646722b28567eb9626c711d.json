{"ast":null,"code":"import { ActionTypes } from \"../action-types\";\nimport { signin as signinRoute, signup as signupRoute, createTour as createTourRoute } from '../../api';\nimport localforage from \"localforage\";\nimport { AxiosError } from \"axios\";\n;\nexport const signin = signinParams => {\n  return async dispatch => {\n    dispatch({\n      type: ActionTypes.SIGNIN_LOADING\n    });\n\n    try {\n      const response = await signinRoute(signinParams);\n      await localforage.setItem('profile', JSON.stringify(response.data));\n      signinParams.toast.success(\"Login Succesfully!\");\n      signinParams.navigate('/');\n      dispatch({\n        type: ActionTypes.SIGN_IN,\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: ActionTypes.SIGNIN_ERROR,\n        payload: {\n          error: formatError(error)\n        }\n      });\n    }\n  };\n};\nexport const signup = signupParams => {\n  return async dispatch => {\n    dispatch({\n      type: ActionTypes.SIGNUP_LOADING\n    });\n\n    try {\n      const {\n        data\n      } = await signupRoute(signupParams);\n      dispatch({\n        type: ActionTypes.SIGN_UP,\n        payload: data\n      });\n      signupParams.toast(\"Singup successfully\");\n      signupParams.navigate('/');\n    } catch (error) {\n      dispatch({\n        type: ActionTypes.SIGNUP_ERROR,\n        payload: {\n          error: formatError(error)\n        }\n      });\n    }\n  };\n};\nexport const setUser = () => {\n  return async dispatch => {\n    const user = await localforage.getItem(\"profile\");\n\n    if (user) {\n      dispatch({\n        type: ActionTypes.SET_USER,\n        payload: {\n          user: JSON.parse(user).user\n        }\n      });\n    }\n  };\n};\nexport const signout = () => {\n  return async dispatch => {\n    await localforage.clear();\n    dispatch({\n      type: ActionTypes.SIGN_OUT\n    });\n  };\n};\nexport const createTour = tourData => {\n  return async dispatch => {\n    dispatch({\n      type: ActionTypes.TOUR_CREATE\n    });\n\n    try {\n      const {\n        data\n      } = await createTourRoute(tourData);\n      console.log(data); // navigate to home\n      // toast the result\n\n      dispatch({\n        type: ActionTypes.TOUR_CREATE_FINISHED\n      });\n    } catch (error) {\n      console.log(formatError(error));\n      dispatch({\n        type: ActionTypes.TOUR_CREATE_ERROR,\n        payload: {\n          error: formatError(error)\n        }\n      });\n    }\n  };\n};\n\nconst formatError = error => {\n  var _error$response;\n\n  return error instanceof AxiosError ? (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data.error : \"Something went wrong on the server\";\n};","map":{"version":3,"names":["ActionTypes","signin","signinRoute","signup","signupRoute","createTour","createTourRoute","localforage","AxiosError","signinParams","dispatch","type","SIGNIN_LOADING","response","setItem","JSON","stringify","data","toast","success","navigate","SIGN_IN","payload","error","SIGNIN_ERROR","formatError","signupParams","SIGNUP_LOADING","SIGN_UP","SIGNUP_ERROR","setUser","user","getItem","SET_USER","parse","signout","clear","SIGN_OUT","tourData","TOUR_CREATE","console","log","TOUR_CREATE_FINISHED","TOUR_CREATE_ERROR"],"sources":["/home/haziz1/react-projects/tour-app/client/src/states/action-creators/index.ts"],"sourcesContent":["import { ActionTypes } from \"../action-types\";\nimport { SigninActions } from '../actions/signin-action';\nimport { SignupActions } from \"../actions/signup-action\";\nimport {\n    signin as signinRoute,\n    signup as signupRoute,\n    createTour as createTourRoute\n} from '../../api'\nimport { Dispatch } from \"react\";\nimport localforage from \"localforage\";\nimport { NavigateFunction } from \"react-router-dom\";\nimport { toast as toastType } from \"react-toastify\";\nimport { AxiosError } from \"axios\";\nimport { Tour } from \"../../../types\";\nimport { TourActions } from \"../actions/tour-action\";\n\n\ninterface AuthParams {\n    email: string;\n    password: string;\n    navigate: NavigateFunction;\n    toast: typeof toastType;\n}\n\ninterface SignupParams extends AuthParams {\n    name: string\n};\n\n\n\nexport const signin = (signinParams: AuthParams) => {\n    return async (dispatch: Dispatch<SigninActions>) => {\n        dispatch({\n            type: ActionTypes.SIGNIN_LOADING,\n        });\n        try {\n            const response = await signinRoute(signinParams)\n            await localforage.setItem('profile', JSON.stringify(response.data));\n            signinParams.toast.success(\"Login Succesfully!\");\n            signinParams.navigate('/');\n            dispatch({\n                type: ActionTypes.SIGN_IN,\n                payload: response.data\n            });\n        } catch (error) {\n            dispatch({\n                type: ActionTypes.SIGNIN_ERROR,\n                payload: { error: formatError(error) }\n            });\n        }\n    }\n}\n\n\n\nexport const signup = (signupParams: SignupParams) => {\n    return async (dispatch: Dispatch<SignupActions>) => {\n        dispatch({\n            type: ActionTypes.SIGNUP_LOADING\n        });\n        try {\n            const { data } = await signupRoute(signupParams);\n            dispatch({\n                type: ActionTypes.SIGN_UP,\n                payload: data\n            });\n            signupParams.toast(\"Singup successfully\");\n            signupParams.navigate('/');\n        } catch (error) {\n            dispatch({\n                type: ActionTypes.SIGNUP_ERROR,\n                payload: { error: formatError(error) }\n            });\n        }\n    }\n}\n\n\nexport const setUser = () => {\n    return async (dispatch: Dispatch<SigninActions>) => {\n        const user = (await localforage.getItem(\"profile\")) as string;\n        if (user) {\n            dispatch({\n                type: ActionTypes.SET_USER,\n                payload: {\n                    user: JSON.parse(user).user\n                }\n            });\n        }\n    }\n}\n\n\nexport const signout = () => {\n    return async (dispatch: Dispatch<SigninActions>) => {\n        await localforage.clear()\n        dispatch({ type: ActionTypes.SIGN_OUT });\n    }\n}\n\n\nexport const createTour = (tourData: Tour) => {\n    return async (dispatch: Dispatch<TourActions>) => {\n        dispatch({ type: ActionTypes.TOUR_CREATE });\n        try {\n            const { data } = await createTourRoute(tourData);\n            console.log(data);\n            // navigate to home\n            // toast the result\n            dispatch({ type: ActionTypes.TOUR_CREATE_FINISHED });\n        } catch (error) {\n            console.log(formatError(error))\n            dispatch({\n                type: ActionTypes.TOUR_CREATE_ERROR, payload: {\n                    error: formatError(error)\n                }\n            });\n        }\n    }\n}\n\n\nconst formatError = (error: any): string => {\n    return error instanceof AxiosError\n        ? error.response?.data.error\n        : \"Something went wrong on the server\";\n}"],"mappings":"AAAA,SAASA,WAAT,QAA4B,iBAA5B;AAGA,SACIC,MAAM,IAAIC,WADd,EAEIC,MAAM,IAAIC,WAFd,EAGIC,UAAU,IAAIC,eAHlB,QAIO,WAJP;AAMA,OAAOC,WAAP,MAAwB,aAAxB;AAGA,SAASC,UAAT,QAA2B,OAA3B;AAcC;AAID,OAAO,MAAMP,MAAM,GAAIQ,YAAD,IAA8B;EAChD,OAAO,MAAOC,QAAP,IAA6C;IAChDA,QAAQ,CAAC;MACLC,IAAI,EAAEX,WAAW,CAACY;IADb,CAAD,CAAR;;IAGA,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMX,WAAW,CAACO,YAAD,CAAlC;MACA,MAAMF,WAAW,CAACO,OAAZ,CAAoB,SAApB,EAA+BC,IAAI,CAACC,SAAL,CAAeH,QAAQ,CAACI,IAAxB,CAA/B,CAAN;MACAR,YAAY,CAACS,KAAb,CAAmBC,OAAnB,CAA2B,oBAA3B;MACAV,YAAY,CAACW,QAAb,CAAsB,GAAtB;MACAV,QAAQ,CAAC;QACLC,IAAI,EAAEX,WAAW,CAACqB,OADb;QAELC,OAAO,EAAET,QAAQ,CAACI;MAFb,CAAD,CAAR;IAIH,CATD,CASE,OAAOM,KAAP,EAAc;MACZb,QAAQ,CAAC;QACLC,IAAI,EAAEX,WAAW,CAACwB,YADb;QAELF,OAAO,EAAE;UAAEC,KAAK,EAAEE,WAAW,CAACF,KAAD;QAApB;MAFJ,CAAD,CAAR;IAIH;EACJ,CAnBD;AAoBH,CArBM;AAyBP,OAAO,MAAMpB,MAAM,GAAIuB,YAAD,IAAgC;EAClD,OAAO,MAAOhB,QAAP,IAA6C;IAChDA,QAAQ,CAAC;MACLC,IAAI,EAAEX,WAAW,CAAC2B;IADb,CAAD,CAAR;;IAGA,IAAI;MACA,MAAM;QAAEV;MAAF,IAAW,MAAMb,WAAW,CAACsB,YAAD,CAAlC;MACAhB,QAAQ,CAAC;QACLC,IAAI,EAAEX,WAAW,CAAC4B,OADb;QAELN,OAAO,EAAEL;MAFJ,CAAD,CAAR;MAIAS,YAAY,CAACR,KAAb,CAAmB,qBAAnB;MACAQ,YAAY,CAACN,QAAb,CAAsB,GAAtB;IACH,CARD,CAQE,OAAOG,KAAP,EAAc;MACZb,QAAQ,CAAC;QACLC,IAAI,EAAEX,WAAW,CAAC6B,YADb;QAELP,OAAO,EAAE;UAAEC,KAAK,EAAEE,WAAW,CAACF,KAAD;QAApB;MAFJ,CAAD,CAAR;IAIH;EACJ,CAlBD;AAmBH,CApBM;AAuBP,OAAO,MAAMO,OAAO,GAAG,MAAM;EACzB,OAAO,MAAOpB,QAAP,IAA6C;IAChD,MAAMqB,IAAI,GAAI,MAAMxB,WAAW,CAACyB,OAAZ,CAAoB,SAApB,CAApB;;IACA,IAAID,IAAJ,EAAU;MACNrB,QAAQ,CAAC;QACLC,IAAI,EAAEX,WAAW,CAACiC,QADb;QAELX,OAAO,EAAE;UACLS,IAAI,EAAEhB,IAAI,CAACmB,KAAL,CAAWH,IAAX,EAAiBA;QADlB;MAFJ,CAAD,CAAR;IAMH;EACJ,CAVD;AAWH,CAZM;AAeP,OAAO,MAAMI,OAAO,GAAG,MAAM;EACzB,OAAO,MAAOzB,QAAP,IAA6C;IAChD,MAAMH,WAAW,CAAC6B,KAAZ,EAAN;IACA1B,QAAQ,CAAC;MAAEC,IAAI,EAAEX,WAAW,CAACqC;IAApB,CAAD,CAAR;EACH,CAHD;AAIH,CALM;AAQP,OAAO,MAAMhC,UAAU,GAAIiC,QAAD,IAAoB;EAC1C,OAAO,MAAO5B,QAAP,IAA2C;IAC9CA,QAAQ,CAAC;MAAEC,IAAI,EAAEX,WAAW,CAACuC;IAApB,CAAD,CAAR;;IACA,IAAI;MACA,MAAM;QAAEtB;MAAF,IAAW,MAAMX,eAAe,CAACgC,QAAD,CAAtC;MACAE,OAAO,CAACC,GAAR,CAAYxB,IAAZ,EAFA,CAGA;MACA;;MACAP,QAAQ,CAAC;QAAEC,IAAI,EAAEX,WAAW,CAAC0C;MAApB,CAAD,CAAR;IACH,CAND,CAME,OAAOnB,KAAP,EAAc;MACZiB,OAAO,CAACC,GAAR,CAAYhB,WAAW,CAACF,KAAD,CAAvB;MACAb,QAAQ,CAAC;QACLC,IAAI,EAAEX,WAAW,CAAC2C,iBADb;QACgCrB,OAAO,EAAE;UAC1CC,KAAK,EAAEE,WAAW,CAACF,KAAD;QADwB;MADzC,CAAD,CAAR;IAKH;EACJ,CAhBD;AAiBH,CAlBM;;AAqBP,MAAME,WAAW,GAAIF,KAAD,IAAwB;EAAA;;EACxC,OAAOA,KAAK,YAAYf,UAAjB,sBACDe,KAAK,CAACV,QADL,oDACD,gBAAgBI,IAAhB,CAAqBM,KADpB,GAED,oCAFN;AAGH,CAJD"},"metadata":{},"sourceType":"module"}