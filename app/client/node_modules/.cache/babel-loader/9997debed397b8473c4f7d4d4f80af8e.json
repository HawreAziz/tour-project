{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst Collection = require('../Collection');\n\nconst matchNode = require('../matchNode');\n\nconst once = require('../utils/once');\n\nconst recast = require('recast');\n\nconst Node = recast.types.namedTypes.Node;\nvar types = recast.types.namedTypes;\n/**\n* @mixin\n*/\n\nconst traversalMethods = {\n  /**\n   * Find nodes of a specific type within the nodes of this collection.\n   *\n   * @param {type}\n   * @param {filter}\n   * @return {Collection}\n   */\n  find: function (type, filter) {\n    const paths = [];\n    const visitorMethodName = 'visit' + type;\n    const visitor = {};\n\n    function visit(path) {\n      /*jshint validthis:true */\n      if (!filter || matchNode(path.value, filter)) {\n        paths.push(path);\n      }\n\n      this.traverse(path);\n    }\n\n    this.__paths.forEach(function (p, i) {\n      const self = this;\n\n      visitor[visitorMethodName] = function (path) {\n        if (self.__paths[i] === path) {\n          this.traverse(path);\n        } else {\n          return visit.call(this, path);\n        }\n      };\n\n      recast.visit(p, visitor);\n    }, this);\n\n    return Collection.fromPaths(paths, this, type);\n  },\n\n  /**\n   * Returns a collection containing the paths that create the scope of the\n   * currently selected paths. Dedupes the paths.\n   *\n   * @return {Collection}\n   */\n  closestScope: function () {\n    return this.map(path => path.scope && path.scope.path);\n  },\n\n  /**\n   * Traverse the AST up and finds the closest node of the provided type.\n   *\n   * @param {Collection}\n   * @param {filter}\n   * @return {Collection}\n   */\n  closest: function (type, filter) {\n    return this.map(function (path) {\n      let parent = path.parent;\n\n      while (parent && !(type.check(parent.value) && (!filter || matchNode(parent.value, filter)))) {\n        parent = parent.parent;\n      }\n\n      return parent || null;\n    });\n  },\n\n  /**\n   * Finds the declaration for each selected path. Useful for member expressions\n   * or JSXElements. Expects a callback function that maps each path to the name\n   * to look for.\n   *\n   * If the callback returns a falsey value, the element is skipped.\n   *\n   * @param {function} nameGetter\n   *\n   * @return {Collection}\n   */\n  getVariableDeclarators: function (nameGetter) {\n    return this.map(function (path) {\n      /*jshint curly:false*/\n      let scope = path.scope;\n      if (!scope) return;\n      const name = nameGetter.apply(path, arguments);\n      if (!name) return;\n      scope = scope.lookup(name);\n      if (!scope) return;\n      const bindings = scope.getBindings()[name];\n      if (!bindings) return;\n      const decl = Collection.fromPaths(bindings).closest(types.VariableDeclarator);\n\n      if (decl.length === 1) {\n        return decl.paths()[0];\n      }\n    }, types.VariableDeclarator);\n  }\n};\n\nfunction toArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n/**\n* @mixin\n*/\n\n\nconst mutationMethods = {\n  /**\n   * Simply replaces the selected nodes with the provided node. If a function\n   * is provided it is executed for every node and the node is replaced with the\n   * functions return value.\n   *\n   * @param {Node|Array<Node>|function} nodes\n   * @return {Collection}\n   */\n  replaceWith: function (nodes) {\n    return this.forEach(function (path, i) {\n      const newNodes = typeof nodes === 'function' ? nodes.call(path, path, i) : nodes;\n      path.replace.apply(path, toArray(newNodes));\n    });\n  },\n\n  /**\n   * Inserts a new node before the current one.\n   *\n   * @param {Node|Array<Node>|function} insert\n   * @return {Collection}\n   */\n  insertBefore: function (insert) {\n    return this.forEach(function (path, i) {\n      const newNodes = typeof insert === 'function' ? insert.call(path, path, i) : insert;\n      path.insertBefore.apply(path, toArray(newNodes));\n    });\n  },\n\n  /**\n   * Inserts a new node after the current one.\n   *\n   * @param {Node|Array<Node>|function} insert\n   * @return {Collection}\n   */\n  insertAfter: function (insert) {\n    return this.forEach(function (path, i) {\n      const newNodes = typeof insert === 'function' ? insert.call(path, path, i) : insert;\n      path.insertAfter.apply(path, toArray(newNodes));\n    });\n  },\n  remove: function () {\n    return this.forEach(path => path.prune());\n  }\n};\n\nfunction register() {\n  Collection.registerMethods(traversalMethods, Node);\n  Collection.registerMethods(mutationMethods, Node);\n  Collection.setDefaultCollectionType(Node);\n}\n\nexports.register = once(register);","map":{"version":3,"names":["Collection","require","matchNode","once","recast","Node","types","namedTypes","traversalMethods","find","type","filter","paths","visitorMethodName","visitor","visit","path","value","push","traverse","__paths","forEach","p","i","self","call","fromPaths","closestScope","map","scope","closest","parent","check","getVariableDeclarators","nameGetter","name","apply","arguments","lookup","bindings","getBindings","decl","VariableDeclarator","length","toArray","Array","isArray","mutationMethods","replaceWith","nodes","newNodes","replace","insertBefore","insert","insertAfter","remove","prune","register","registerMethods","setDefaultCollectionType","exports"],"sources":["/home/haziz1/node_modules/jscodeshift/src/collections/Node.js"],"sourcesContent":["\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nconst Collection = require('../Collection');\n\nconst matchNode = require('../matchNode');\nconst once = require('../utils/once');\nconst recast = require('recast');\n\nconst Node = recast.types.namedTypes.Node;\nvar types = recast.types.namedTypes;\n\n/**\n* @mixin\n*/\nconst traversalMethods = {\n\n  /**\n   * Find nodes of a specific type within the nodes of this collection.\n   *\n   * @param {type}\n   * @param {filter}\n   * @return {Collection}\n   */\n  find: function(type, filter) {\n    const paths = [];\n    const visitorMethodName = 'visit' + type;\n\n    const visitor = {};\n    function visit(path) {\n      /*jshint validthis:true */\n      if (!filter || matchNode(path.value, filter)) {\n        paths.push(path);\n      }\n      this.traverse(path);\n    }\n    this.__paths.forEach(function(p, i) {\n      const self = this;\n      visitor[visitorMethodName] = function(path) {\n        if (self.__paths[i] === path) {\n          this.traverse(path);\n        } else {\n          return visit.call(this, path);\n        }\n      };\n      recast.visit(p, visitor);\n    }, this);\n\n    return Collection.fromPaths(paths, this, type);\n  },\n\n  /**\n   * Returns a collection containing the paths that create the scope of the\n   * currently selected paths. Dedupes the paths.\n   *\n   * @return {Collection}\n   */\n  closestScope: function() {\n    return this.map(path => path.scope && path.scope.path);\n  },\n\n  /**\n   * Traverse the AST up and finds the closest node of the provided type.\n   *\n   * @param {Collection}\n   * @param {filter}\n   * @return {Collection}\n   */\n  closest: function(type, filter) {\n    return this.map(function(path) {\n      let parent = path.parent;\n      while (\n        parent &&\n        !(\n          type.check(parent.value) &&\n          (!filter || matchNode(parent.value, filter))\n        )\n      ) {\n        parent = parent.parent;\n      }\n      return parent || null;\n    });\n  },\n\n  /**\n   * Finds the declaration for each selected path. Useful for member expressions\n   * or JSXElements. Expects a callback function that maps each path to the name\n   * to look for.\n   *\n   * If the callback returns a falsey value, the element is skipped.\n   *\n   * @param {function} nameGetter\n   *\n   * @return {Collection}\n   */\n  getVariableDeclarators: function(nameGetter) {\n    return this.map(function(path) {\n      /*jshint curly:false*/\n      let scope = path.scope;\n      if (!scope) return;\n      const name = nameGetter.apply(path, arguments);\n      if (!name) return;\n      scope = scope.lookup(name);\n      if (!scope) return;\n      const bindings = scope.getBindings()[name];\n      if (!bindings) return;\n      const decl = Collection.fromPaths(bindings)\n        .closest(types.VariableDeclarator);\n      if (decl.length === 1) {\n        return decl.paths()[0];\n      }\n    }, types.VariableDeclarator);\n  },\n};\n\nfunction toArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n\n/**\n* @mixin\n*/\nconst mutationMethods = {\n  /**\n   * Simply replaces the selected nodes with the provided node. If a function\n   * is provided it is executed for every node and the node is replaced with the\n   * functions return value.\n   *\n   * @param {Node|Array<Node>|function} nodes\n   * @return {Collection}\n   */\n  replaceWith: function(nodes) {\n    return this.forEach(function(path, i) {\n      const newNodes =\n        (typeof nodes === 'function') ? nodes.call(path, path, i) : nodes;\n      path.replace.apply(path, toArray(newNodes));\n    });\n  },\n\n  /**\n   * Inserts a new node before the current one.\n   *\n   * @param {Node|Array<Node>|function} insert\n   * @return {Collection}\n   */\n  insertBefore: function(insert) {\n    return this.forEach(function(path, i) {\n      const newNodes =\n        (typeof insert === 'function') ? insert.call(path, path, i) : insert;\n      path.insertBefore.apply(path, toArray(newNodes));\n    });\n  },\n\n  /**\n   * Inserts a new node after the current one.\n   *\n   * @param {Node|Array<Node>|function} insert\n   * @return {Collection}\n   */\n  insertAfter: function(insert) {\n    return this.forEach(function(path, i) {\n      const newNodes =\n        (typeof insert === 'function') ? insert.call(path, path, i) : insert;\n      path.insertAfter.apply(path, toArray(newNodes));\n    });\n  },\n\n  remove: function() {\n    return this.forEach(path => path.prune());\n  }\n\n};\n\nfunction register() {\n  Collection.registerMethods(traversalMethods, Node);\n  Collection.registerMethods(mutationMethods, Node);\n  Collection.setDefaultCollectionType(Node);\n}\n\nexports.register = once(register);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}