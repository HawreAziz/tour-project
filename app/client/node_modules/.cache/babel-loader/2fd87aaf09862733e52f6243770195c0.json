{"ast":null,"code":"import { ActionTypes } from \"../action-types\";\nimport { signin as signinRoute } from '../../api';\nimport localforage from \"localforage\";\nimport { toast } from \"react-toastify\";\nexport const signin = signinParams => {\n  return async dispatch => {\n    dispatch({\n      type: ActionTypes.SIGNIN_LOADING\n    });\n\n    try {\n      const {\n        data\n      } = await signinRoute(signinParams);\n      await localforage.setItem('profile', JSON.stringify(data));\n      dispatch({\n        type: ActionTypes.SIGN_IN,\n        payload: data\n      });\n      toast.success(\"Login Succesfully!\");\n    } catch (err) {\n      const error = err instanceof Error ? err.message : \"Could not contact server\";\n      dispatch({\n        type: ActionTypes.SIGNIN_ERROR,\n        payload: {\n          error\n        }\n      });\n      toast.error(\"Login failed\");\n    }\n  };\n};","map":{"version":3,"names":["ActionTypes","signin","signinRoute","localforage","toast","signinParams","dispatch","type","SIGNIN_LOADING","data","setItem","JSON","stringify","SIGN_IN","payload","success","err","error","Error","message","SIGNIN_ERROR"],"sources":["/home/haziz1/react-projects/tour-app/client/src/states/action-creators/index.ts"],"sourcesContent":["import { ActionTypes } from \"../action-types\";\nimport { Actions } from '../actions/signin-action';\nimport { signin as signinRoute } from '../../api'\nimport { Dispatch } from \"react\";\nimport localforage from \"localforage\";\nimport { NavigateFunction } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\n\ninterface SigninParams {\n    email: string;\n    password: string;\n    navigate: NavigateFunction;\n    toast: typeof toast;\n}\n\nexport const signin = (signinParams: SigninParams) => {\n    return async (dispatch: Dispatch<Actions>) => {\n        dispatch({\n            type: ActionTypes.SIGNIN_LOADING,\n        });\n        try {\n            const { data } = await signinRoute(signinParams)\n            await localforage.setItem('profile', JSON.stringify(data));\n            dispatch({\n                type: ActionTypes.SIGN_IN,\n                payload: data\n            });\n            toast.success(\"Login Succesfully!\");\n            \n        } catch (err) {\n            const error = err instanceof Error ? err.message : \"Could not contact server\";\n            dispatch({\n                type: ActionTypes.SIGNIN_ERROR,\n                payload: { error }\n            });\n            toast.error(\"Login failed\");\n        }\n    }\n}"],"mappings":"AAAA,SAASA,WAAT,QAA4B,iBAA5B;AAEA,SAASC,MAAM,IAAIC,WAAnB,QAAsC,WAAtC;AAEA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AAUA,OAAO,MAAMH,MAAM,GAAII,YAAD,IAAgC;EAClD,OAAO,MAAOC,QAAP,IAAuC;IAC1CA,QAAQ,CAAC;MACLC,IAAI,EAAEP,WAAW,CAACQ;IADb,CAAD,CAAR;;IAGA,IAAI;MACA,MAAM;QAAEC;MAAF,IAAW,MAAMP,WAAW,CAACG,YAAD,CAAlC;MACA,MAAMF,WAAW,CAACO,OAAZ,CAAoB,SAApB,EAA+BC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAA/B,CAAN;MACAH,QAAQ,CAAC;QACLC,IAAI,EAAEP,WAAW,CAACa,OADb;QAELC,OAAO,EAAEL;MAFJ,CAAD,CAAR;MAIAL,KAAK,CAACW,OAAN,CAAc,oBAAd;IAEH,CATD,CASE,OAAOC,GAAP,EAAY;MACV,MAAMC,KAAK,GAAGD,GAAG,YAAYE,KAAf,GAAuBF,GAAG,CAACG,OAA3B,GAAqC,0BAAnD;MACAb,QAAQ,CAAC;QACLC,IAAI,EAAEP,WAAW,CAACoB,YADb;QAELN,OAAO,EAAE;UAAEG;QAAF;MAFJ,CAAD,CAAR;MAIAb,KAAK,CAACa,KAAN,CAAY,cAAZ;IACH;EACJ,CArBD;AAsBH,CAvBM"},"metadata":{},"sourceType":"module"}