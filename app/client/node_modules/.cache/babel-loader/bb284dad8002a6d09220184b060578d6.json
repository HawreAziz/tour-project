{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(pluginConfig) {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n\n      const actualOptions = this.plugins.get(pluginName);\n\n      for (const key of Object.keys(pluginOptions)) {\n        if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  getPluginOption(plugin, name) {\n    var _this$plugins$get;\n\n    return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];\n  }\n\n}\n\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\nfunction setLeadingComments(node, comments) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const {\n      start: nodeStart\n    } = node;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n\n        break;\n      }\n    }\n  }\n\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n\n    this.state.commentStack = [];\n  }\n\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  takeSurroundingComments(node, start, end) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n\n}\n\nconst ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\nconst ErrorMessages = makeErrorTemplates({\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: \"Unsyntactic %0.\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: \"`import()` requires exactly %0.\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  IncompatibleRegExpUVFlags: \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: \"Expected number in radix %0.\",\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n  InvalidIdentifier: \"Invalid identifier %0.\",\n  InvalidLhs: \"Invalid left-hand side in %0.\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: \"Label '%0' is already declared.\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PipeBodyIsTighter: \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: 'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: \"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: \"Unexpected token '%0'.\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n}, ErrorCodes.SyntaxError);\nconst SourceTypeModuleErrorMessages = makeErrorTemplates({\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`\n}, ErrorCodes.SourceTypeModuleError);\n\nfunction keepReasonCodeCompat(reasonCode, syntaxPlugin) {\n  {\n    if (syntaxPlugin === \"flow\" && reasonCode === \"PatternIsOptional\") {\n      return \"OptionalBindingPattern\";\n    }\n  }\n  return reasonCode;\n}\n\nfunction makeErrorTemplates(messages, code, syntaxPlugin) {\n  const templates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),\n      template: messages[reasonCode]\n    });\n  });\n  return Object.freeze(templates);\n}\n\nclass ParserError extends CommentsParser {\n  raise(_ref, origin) {\n    let {\n      code,\n      reasonCode,\n      template\n    } = _ref;\n\n    for (var _len = arguments.length, params = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      params[_key - 2] = arguments[_key];\n    }\n\n    return this.raiseWithData(origin.node ? origin.node.loc.start : origin.at, {\n      code,\n      reasonCode\n    }, template, ...params);\n  }\n\n  raiseOverwrite(loc, _ref2) {\n    let {\n      code,\n      template\n    } = _ref2;\n\n    for (var _len2 = arguments.length, params = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      params[_key2 - 2] = arguments[_key2];\n    }\n\n    const pos = loc.index;\n    const message = template.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n\n        if (error.pos === pos) {\n          return Object.assign(error, {\n            message\n          });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n\n    return this._raise({\n      code,\n      loc,\n      pos\n    }, message);\n  }\n\n  raiseWithData(loc, data, errorTemplate) {\n    for (var _len3 = arguments.length, params = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n      params[_key3 - 3] = arguments[_key3];\n    }\n\n    const pos = loc.index;\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nconst {\n  defineProperty\n} = Object;\n\nconst toUnenumerable = (object, key) => defineProperty(object, key, {\n  enumerable: false,\n  value: object[key]\n});\n\nfunction toESTreeLocation(node) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n  return node;\n}\n\nvar estree = superClass => class extends superClass {\n  parse() {\n    const file = toESTreeLocation(super.parse());\n\n    if (this.options.tokens) {\n      file.tokens = file.tokens.map(toESTreeLocation);\n    }\n\n    return file;\n  }\n\n  parseRegExpLiteral(_ref3) {\n    let {\n      pattern,\n      flags\n    } = _ref3;\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  parseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  parseBlockBody(node) {\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parsePrivateName() {\n    const node = super.parsePrivateName();\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return node;\n      }\n    }\n    return this.convertPrivateNameToPrivateIdentifier(node);\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n    }\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n    }\n    return node.name;\n  }\n\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n    let inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty() {\n    const propertyNode = super.parseClassProperty(...arguments);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty() {\n    const propertyNode = super.parseClassPrivateProperty(...arguments);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    propertyNode.computed = false;\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n\n    return super.isAssignable(node, isBinding);\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (node != null && this.isObjectProperty(node)) {\n      const {\n        key,\n        value\n      } = node;\n\n      if (this.isPrivateName(key)) {\n        this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n      }\n\n      this.toAssignable(value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(ErrorMessages.PatternHasAccessor, {\n        node: prop.key\n      });\n    } else if (prop.method) {\n      this.raise(ErrorMessages.PatternHasMethod, {\n        node: prop.key\n      });\n    } else {\n      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        args[_key5 - 1] = arguments[_key5];\n      }\n\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n  finishNodeAt(node, type, endLoc) {\n    return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n  }\n\n  resetEndLocation(node) {\n    let endLoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEndLoc;\n    super.resetEndLocation(node, endLoc);\n    toESTreeLocation(node);\n  }\n\n};\n\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n}\n\nconst types = {\n  brace: new TokContext(\"{\"),\n  j_oTag: new TokContext(\"<tag\"),\n  j_cTag: new TokContext(\"</tag\"),\n  j_expr: new TokContext(\"<tag>...</tag>\", true)\n};\n{\n  types.template = new TokContext(\"`\", true);\n}\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\nclass ExportedTokenType {\n  constructor(label) {\n    let conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    {\n      this.updateContext = null;\n    }\n  }\n\n}\n\nconst keywords$1 = new Map();\n\nfunction createKeyword(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return createToken(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nlet tokenTypeCounter = -1;\nconst tokenTypes = [];\nconst tokenLabels = [];\nconst tokenBinops = [];\nconst tokenBeforeExprs = [];\nconst tokenStartsExprs = [];\nconst tokenPrefixes = [];\n\nfunction createToken(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\n\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;\n\n  ++tokenTypeCounter;\n  keywords$1.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);\n  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);\n  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);\n  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n  return tokenTypeCounter;\n}\n\nconst tt = {\n  bracketL: createToken(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: createToken(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: createToken(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: createToken(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: createToken(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: createToken(\"}\", {\n    beforeExpr\n  }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", {\n    beforeExpr\n  }),\n  semi: createToken(\";\", {\n    beforeExpr\n  }),\n  colon: createToken(\":\", {\n    beforeExpr\n  }),\n  doubleColon: createToken(\"::\", {\n    beforeExpr\n  }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", {\n    beforeExpr\n  }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", {\n    beforeExpr\n  }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", {\n    beforeExpr\n  }),\n  backQuote: createToken(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: createToken(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  templateTail: createToken(\"...`\", {\n    startsExpr\n  }),\n  templateNonTail: createToken(\"...${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: createToken(\"#!...\"),\n  eq: createToken(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  xorAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: createToken(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: createToken(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: createToken(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  doubleCaret: createToken(\"^^\", {\n    startsExpr\n  }),\n  doubleAt: createToken(\"@@\", {\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: createToken(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: createToken(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _as: createKeywordLike(\"as\", {\n    startsExpr\n  }),\n  _assert: createKeywordLike(\"assert\", {\n    startsExpr\n  }),\n  _async: createKeywordLike(\"async\", {\n    startsExpr\n  }),\n  _await: createKeywordLike(\"await\", {\n    startsExpr\n  }),\n  _from: createKeywordLike(\"from\", {\n    startsExpr\n  }),\n  _get: createKeywordLike(\"get\", {\n    startsExpr\n  }),\n  _let: createKeywordLike(\"let\", {\n    startsExpr\n  }),\n  _meta: createKeywordLike(\"meta\", {\n    startsExpr\n  }),\n  _of: createKeywordLike(\"of\", {\n    startsExpr\n  }),\n  _sent: createKeywordLike(\"sent\", {\n    startsExpr\n  }),\n  _set: createKeywordLike(\"set\", {\n    startsExpr\n  }),\n  _static: createKeywordLike(\"static\", {\n    startsExpr\n  }),\n  _yield: createKeywordLike(\"yield\", {\n    startsExpr\n  }),\n  _asserts: createKeywordLike(\"asserts\", {\n    startsExpr\n  }),\n  _checks: createKeywordLike(\"checks\", {\n    startsExpr\n  }),\n  _exports: createKeywordLike(\"exports\", {\n    startsExpr\n  }),\n  _global: createKeywordLike(\"global\", {\n    startsExpr\n  }),\n  _implements: createKeywordLike(\"implements\", {\n    startsExpr\n  }),\n  _intrinsic: createKeywordLike(\"intrinsic\", {\n    startsExpr\n  }),\n  _infer: createKeywordLike(\"infer\", {\n    startsExpr\n  }),\n  _is: createKeywordLike(\"is\", {\n    startsExpr\n  }),\n  _mixins: createKeywordLike(\"mixins\", {\n    startsExpr\n  }),\n  _proto: createKeywordLike(\"proto\", {\n    startsExpr\n  }),\n  _require: createKeywordLike(\"require\", {\n    startsExpr\n  }),\n  _keyof: createKeywordLike(\"keyof\", {\n    startsExpr\n  }),\n  _readonly: createKeywordLike(\"readonly\", {\n    startsExpr\n  }),\n  _unique: createKeywordLike(\"unique\", {\n    startsExpr\n  }),\n  _abstract: createKeywordLike(\"abstract\", {\n    startsExpr\n  }),\n  _declare: createKeywordLike(\"declare\", {\n    startsExpr\n  }),\n  _enum: createKeywordLike(\"enum\", {\n    startsExpr\n  }),\n  _module: createKeywordLike(\"module\", {\n    startsExpr\n  }),\n  _namespace: createKeywordLike(\"namespace\", {\n    startsExpr\n  }),\n  _interface: createKeywordLike(\"interface\", {\n    startsExpr\n  }),\n  _type: createKeywordLike(\"type\", {\n    startsExpr\n  }),\n  _opaque: createKeywordLike(\"opaque\", {\n    startsExpr\n  }),\n  name: createToken(\"name\", {\n    startsExpr\n  }),\n  string: createToken(\"string\", {\n    startsExpr\n  }),\n  num: createToken(\"num\", {\n    startsExpr\n  }),\n  bigint: createToken(\"bigint\", {\n    startsExpr\n  }),\n  decimal: createToken(\"decimal\", {\n    startsExpr\n  }),\n  regexp: createToken(\"regexp\", {\n    startsExpr\n  }),\n  privateName: createToken(\"#name\", {\n    startsExpr\n  }),\n  eof: createToken(\"eof\"),\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", {\n    beforeExpr: true\n  }),\n  jsxTagStart: createToken(\"jsxTagStart\", {\n    startsExpr: true\n  }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n  placeholder: createToken(\"%%\", {\n    startsExpr: true\n  })\n};\n\nfunction tokenIsIdentifier(token) {\n  return token >= 93 && token <= 128;\n}\n\nfunction tokenKeywordOrIdentifierIsKeyword(token) {\n  return token <= 92;\n}\n\nfunction tokenIsKeywordOrIdentifier(token) {\n  return token >= 58 && token <= 128;\n}\n\nfunction tokenIsLiteralPropertyName(token) {\n  return token >= 58 && token <= 132;\n}\n\nfunction tokenComesBeforeExpression(token) {\n  return tokenBeforeExprs[token];\n}\n\nfunction tokenCanStartExpression(token) {\n  return tokenStartsExprs[token];\n}\n\nfunction tokenIsAssignment(token) {\n  return token >= 29 && token <= 33;\n}\n\nfunction tokenIsFlowInterfaceOrTypeOrOpaque(token) {\n  return token >= 125 && token <= 127;\n}\n\nfunction tokenIsLoop(token) {\n  return token >= 90 && token <= 92;\n}\n\nfunction tokenIsKeyword(token) {\n  return token >= 58 && token <= 92;\n}\n\nfunction tokenIsOperator(token) {\n  return token >= 39 && token <= 59;\n}\n\nfunction tokenIsPostfix(token) {\n  return token === 34;\n}\n\nfunction tokenIsPrefix(token) {\n  return tokenPrefixes[token];\n}\n\nfunction tokenIsTSTypeOperator(token) {\n  return token >= 117 && token <= 119;\n}\n\nfunction tokenIsTSDeclarationStart(token) {\n  return token >= 120 && token <= 126;\n}\n\nfunction tokenLabelName(token) {\n  return tokenLabels[token];\n}\n\nfunction tokenOperatorPrecedence(token) {\n  return tokenBinops[token];\n}\n\nfunction tokenIsRightAssociative(token) {\n  return token === 57;\n}\n\nfunction tokenIsTemplate(token) {\n  return token >= 24 && token <= 25;\n}\n\nfunction getExportedToken(token) {\n  return tokenTypes[token];\n}\n\n{\n  tokenTypes[8].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {\n    context.push(types.brace);\n  };\n\n  tokenTypes[22].updateContext = context => {\n    if (context[context.length - 1] === types.template) {\n      context.pop();\n    } else {\n      context.push(types.template);\n    }\n  };\n\n  tokenTypes[138].updateContext = context => {\n    context.push(types.j_expr, types.j_oTag);\n  };\n}\n\nclass Position {\n  constructor(line, col, index) {\n    this.line = void 0;\n    this.column = void 0;\n    this.index = void 0;\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n\n}\n\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nfunction createPositionWithColumnOffset(position, columnOffset) {\n  const {\n    line,\n    column,\n    index\n  } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next, next2) {\n  return current === 64 && next === 64 && isIdentifierStart(next2);\n}\n\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\n\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n\n}\n\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        return false;\n      }\n    }\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, loc) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, loc) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(ErrorMessages.VarRedeclaration, {\n        at: loc\n      }, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor() {\n    super(...arguments);\n    this.declareFunctions = new Set();\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, loc) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.lineStart = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.type = 135;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.context = [types.brace];\n    this.canStartJSXElement = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n\n  init(_ref4) {\n    let {\n      strictMode,\n      sourceType,\n      startLine,\n      startColumn\n    } = _ref4;\n    this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === \"module\";\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\n\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\n\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    this.checkKeywordEscapes();\n\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition\n    };\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach(_ref5 => {\n        let {\n          message,\n          loc\n        } = _ref5;\n        return this.raise(message, {\n          at: loc\n        });\n      });\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(135);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment() {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n\n    if (end === -1) {\n      throw this.raise(ErrorMessages.UnterminatedComment, {\n        at: this.state.curPosition()\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment();\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type) {\n    this.state.type = type;\n    this.updateContext();\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(ErrorMessages.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition()\n      });\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType, {\n          at: this.state.curPosition()\n        });\n      }\n\n      this.state.pos += 2;\n\n      if (next === 123) {\n        this.finishToken(7);\n      } else {\n        this.finishToken(1);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(134, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(134, this.readWord1());\n    } else {\n      this.finishOp(27, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(21);\n    } else {\n      ++this.state.pos;\n      this.finishToken(16);\n    }\n  }\n\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(31, 2);\n    } else {\n      this.finishOp(56, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(28, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? 55 : 54;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = 57;\n    }\n\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? 33 : 30;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(code === 124 ? 41 : 42, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(39, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition()\n          });\n        }\n\n        this.state.pos += 2;\n        this.finishToken(9);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition()\n          });\n        }\n\n        this.state.pos += 2;\n        this.finishToken(4);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(30, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? 43 : 45, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61 && !this.state.inType) {\n      this.finishOp(32, 2);\n    } else if (next === 94 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"^^\"\n    }])) {\n      this.finishOp(37, 2);\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n\n      if (lookaheadCh === 94) {\n        throw this.unexpected();\n      }\n    } else {\n      this.finishOp(44, 1);\n    }\n  }\n\n  readToken_atSign() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 64 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"@@\"\n    }])) {\n      this.finishOp(38, 2);\n    } else {\n      this.finishOp(26, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(34, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(30, 2);\n    } else {\n      this.finishOp(53, 1);\n    }\n  }\n\n  readToken_lt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === 60) {\n      if (this.input.charCodeAt(pos + 2) === 61) {\n        this.finishOp(30, 3);\n        return;\n      }\n\n      this.finishOp(51, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n\n    this.finishOp(47, 1);\n  }\n\n  readToken_gt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === 62) {\n      const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(pos + size) === 61) {\n        this.finishOp(30, size + 1);\n        return;\n      }\n\n      this.finishOp(52, size);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n\n    this.finishOp(48, 1);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(19);\n      return;\n    }\n\n    this.finishOp(code === 61 ? 29 : 35, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(40, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(18);\n    } else {\n      ++this.state.pos;\n      this.finishToken(17);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(10);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(11);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(13);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(12);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n\n          this.state.pos += 2;\n          this.finishToken(2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(0);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(3);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n\n          this.state.pos += 2;\n          this.finishToken(6);\n        } else {\n          ++this.state.pos;\n          this.finishToken(5);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(8);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(15, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(14);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        this.readTemplateToken();\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n        this.readToken_lt();\n        return;\n\n      case 62:\n        this.readToken_gt();\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(36, 1);\n        return;\n\n      case 64:\n        this.readToken_atSign();\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(ErrorMessages.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition()\n    }, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(ErrorMessages.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1)\n        });\n      }\n\n      const ch = this.input.charCodeAt(pos);\n\n      if (isNewLine(ch)) {\n        throw this.raise(ErrorMessages.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1)\n        });\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n\n        escaped = ch === 92;\n      }\n    }\n\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n\n    const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === 118) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(ErrorMessages.IncompatibleRegExpUVFlags, {\n              at: nextPos()\n            });\n          }\n        } else if (cp === 117) {\n          if (mods.includes(\"v\")) {\n            this.raise(ErrorMessages.IncompatibleRegExpUVFlags, {\n              at: nextPos()\n            });\n          }\n        }\n\n        if (mods.includes(char)) {\n          this.raise(ErrorMessages.DuplicateRegExpFlags, {\n            at: nextPos()\n          });\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(ErrorMessages.MalformedRegExpFlags, {\n          at: nextPos()\n        });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n\n    this.state.pos = pos;\n    this.finishToken(133, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen) {\n    let allowNumSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(ErrorMessages.UnexpectedNumericSeparator, {\n            at: this.state.curPosition()\n          });\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(ErrorMessages.UnexpectedNumericSeparator, {\n            at: this.state.curPosition()\n          });\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(ErrorMessages.NumericSeparatorInEscapeSequence, {\n            at: this.state.curPosition()\n          });\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(ErrorMessages.InvalidDigit, {\n            at: this.state.curPosition()\n          }, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(ErrorMessages.InvalidDigit, {\n        at: createPositionWithColumnOffset(startLoc, 2)\n      }, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(ErrorMessages.InvalidDecimal, {\n        at: startLoc\n      });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(ErrorMessages.NumberIdentifier, {\n        at: this.state.curPosition()\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(131, str);\n      return;\n    }\n\n    this.finishToken(130, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(ErrorMessages.InvalidNumber, {\n        at: this.state.curPosition()\n      });\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(ErrorMessages.StrictOctalLiteral, startLoc);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(ErrorMessages.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos)\n          });\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(ErrorMessages.InvalidOrMissingExponent, {\n          at: startLoc\n        });\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(ErrorMessages.InvalidBigIntLiteral, {\n          at: startLoc\n        });\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(ErrorMessages.InvalidDecimal, {\n          at: startLoc\n        });\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(ErrorMessages.NumberIdentifier, {\n        at: this.state.curPosition()\n      });\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(131, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(132, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(130, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(ErrorMessages.InvalidCodePoint, {\n            at: this.state.curPosition()\n          });\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(ErrorMessages.UnterminatedString, {\n          at: this.state.startLoc\n        });\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(ErrorMessages.UnterminatedString, {\n          at: this.state.startLoc\n        });\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(129, out);\n  }\n\n  readTemplateContinuation() {\n    if (!this.match(8)) {\n      this.unexpected(null, 8);\n    }\n\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  readTemplateToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n    ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(ErrorMessages.UnterminatedTemplate, {\n          at: createPositionWithColumnOffset(this.state.startLoc, 1)\n        });\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96) {\n        ++this.state.pos;\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(24, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        this.state.pos += 2;\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(25, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(message, loc) {\n    if (this.state.strict && !this.state.strictErrors.has(loc.index)) {\n      this.raise(message, {\n        at: loc\n      });\n    } else {\n      this.state.strictErrors.set(loc.index, {\n        loc,\n        message\n      });\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(ErrorMessages.StrictNumericEscape, createPositionWithColumnOffset(this.state.curPosition(), -1));\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = createPositionWithColumnOffset(this.state.curPosition(), -1);\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(ErrorMessages.StrictNumericEscape, codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codeLoc = this.state.curPosition();\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(ErrorMessages.InvalidEscapeSequence, {\n          at: codeLoc\n        });\n      } else {\n        this.state.pos = codeLoc.index - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(ErrorMessages.MissingUnicodeEscape, {\n            at: this.state.curPosition()\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(ErrorMessages.EscapedCharNotAnIdentifier, {\n              at: escStart\n            });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word);\n\n    if (type !== undefined) {\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(128, word);\n    }\n  }\n\n  checkKeywordEscapes() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(ErrorMessages.InvalidEscapedReservedWord, {\n        at: this.state.startLoc\n      }, tokenLabelName(type));\n    }\n  }\n\n  updateContext(prevType) {}\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\n\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.raise(ErrorMessages.InvalidPrivateFieldResolution, {\n          at: loc\n        }, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, loc) {\n    const {\n      privateNames,\n      loneAccessors,\n      undefinedPrivateNames\n    } = this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(ErrorMessages.PrivateNameRedeclaration, {\n        at: loc\n      }, name);\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, loc) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      this.raise(ErrorMessages.InvalidPrivateFieldResolution, {\n        at: loc\n      }, name);\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor() {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : kExpression;\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(message, loc) {\n    this.errors.set(loc.index, {\n      message,\n      loc\n    });\n  }\n\n  clearDeclarationError(loc) {\n    this.errors.delete(loc.index);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(loc, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(template, loc);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(template, {\n      at: loc\n    });\n  }\n\n  recordParenthesizedIdentifierError(template, loc) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(template, {\n        at: loc\n      });\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(template, loc);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(template, loc) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(template, loc);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(_ref6 => {\n      let {\n        message,\n        loc\n      } = _ref6;\n      this.raise(message, {\n        at: loc\n      });\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\n\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\n\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, value) {\n    let enumerable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, {\n        enumerable,\n        value\n      });\n    }\n  }\n\n  isContextual(token) {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n\n    return false;\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(token) {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  expectContextual(token, template) {\n    if (!this.eatContextual(token)) {\n      if (template != null) {\n        throw this.raise(template, {\n          at: this.state.startLoc\n        });\n      }\n\n      throw this.unexpected(null, token);\n    }\n  }\n\n  canInsertSemicolon() {\n    return this.match(135) || this.match(8) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator() {\n    return this.eat(13) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    let allowAsi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;\n    this.raise(ErrorMessages.MissingSemicolon, {\n      at: this.state.lastTokEndLoc\n    });\n  }\n\n  expect(type, loc) {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  assertNoSpace() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Unexpected space.\";\n\n    if (this.state.start > this.state.lastTokEndLoc.index) {\n      this.raise({\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message\n      }, {\n        at: this.state.lastTokEndLoc\n      });\n    }\n  }\n\n  unexpected(loc, type) {\n    throw this.raise({\n      code: ErrorCodes.SyntaxError,\n      reasonCode: \"UnexpectedToken\",\n      template: type != null ? `Unexpected token, expected \"${tokenLabelName(type)}\"` : \"Unexpected token\"\n    }, {\n      at: loc != null ? loc : this.state.startLoc\n    });\n  }\n\n  getPluginNamesFromConfigs(pluginConfigs) {\n    return pluginConfigs.map(c => {\n      if (typeof c === \"string\") {\n        return c;\n      } else {\n        return c[0];\n      }\n    });\n  }\n\n  expectPlugin(pluginConfig, loc) {\n    if (!this.hasPlugin(pluginConfig)) {\n      throw this.raiseWithData(loc != null ? loc : this.state.startLoc, {\n        missingPlugin: this.getPluginNamesFromConfigs([pluginConfig])\n      }, `This experimental syntax requires enabling the parser plugin: ${JSON.stringify(pluginConfig)}.`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(pluginConfigs) {\n    if (!pluginConfigs.some(c => this.hasPlugin(c))) {\n      throw this.raiseWithData(this.state.startLoc, {\n        missingPlugin: this.getPluginNamesFromConfigs(pluginConfigs)\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): ${pluginConfigs.map(c => JSON.stringify(c)).join(\", \")}.`);\n    }\n  }\n\n  tryParse(fn) {\n    let oldState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.clone();\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn(function () {\n        let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc\n    } = refExpressionErrors;\n    const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(ErrorMessages.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(ErrorMessages.DuplicateProto, {\n        at: doubleProtoLoc\n      });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(ErrorMessages.UnexpectedPrivateField, {\n        at: privateKeyLoc\n      });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes() {\n    let inModule = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.sourceType === \"module\";\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors) {\n    const {\n      privateKeyLoc\n    } = refExpressionErrors;\n\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n\n}\n\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssignLoc = null;\n    this.doubleProtoLoc = null;\n    this.privateKeyLoc = null;\n    this.optionalParametersLoc = null;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n}\n\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\n\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n\n  return cloned;\n}\n\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n\n  if (node.raw !== undefined) {\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n\n  cloned.value = node.value;\n  return cloned;\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, endLoc) {\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node) {\n    let endLoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEndLoc;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = makeErrorTemplates({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n}, ErrorCodes.SyntaxError, \"flow\");\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type) {\n  return tokenIsKeywordOrIdentifier(type) && type !== 97;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = superClass => class extends superClass {\n  constructor() {\n    super(...arguments);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== 129 && type !== 13 && type !== 28) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || 14);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloLoc = this.state.startLoc;\n    this.next();\n    this.expectContextual(107);\n\n    if (this.state.lastTokStart > moduloLoc.index + 1) {\n      this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n        at: moduloLoc\n      });\n    }\n\n    if (this.eat(10)) {\n      node.value = this.parseExpression();\n      this.expect(11);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(14);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(54)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(54)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.match(47)) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(10);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(11);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.loc.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(80)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(68)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(74)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(123)) {\n      if (this.match(16)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(FlowErrors.NestedDeclareModule, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(126)) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(127)) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(125)) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(82)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(129)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(5);\n\n    while (!this.match(8)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(83)) {\n        this.next();\n\n        if (!this.isContextual(126) && !this.match(87)) {\n          this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(121, FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(8);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n            node: bodyElement\n          });\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n            node: bodyElement\n          });\n        }\n\n        if (kind === \"ES\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n            node: bodyElement\n          });\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(82);\n\n    if (this.eat(65)) {\n      if (this.match(68) || this.match(80)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(75) || this.isLet() || (this.isContextual(126) || this.isContextual(125)) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n          at: this.state.startLoc\n        }, label, suggestion);\n      }\n\n      if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(127)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(55) || this.match(5) || this.isContextual(125) || this.isContextual(126) || this.isContextual(127)) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(108);\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node) {\n    let isClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.loc.start);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(12));\n    }\n\n    if (this.isContextual(114)) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    if (this.isContextual(110)) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n        at: this.state.startLoc\n      });\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, {\n      at: startLoc\n    }, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.startLoc, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(29);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(126);\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(14)) {\n      node.supertype = this.flowParseTypeInitialiser(14);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(29);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter() {\n    let requireDefault = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const nodeStartLoc = this.state.startLoc;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(29)) {\n      this.eat(29);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(FlowErrors.MissingTypeParamDefault, {\n          at: nodeStartLoc\n        });\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.match(47) || this.match(138)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    } while (!this.match(48));\n\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.match(48)) {\n      node.params.push(this.flowParseType());\n\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n\n    while (!this.match(48)) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(125);\n    node.extends = [];\n\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(130) || this.match(129) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === 14) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(3);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(3);\n    this.expect(3);\n\n    if (this.match(47) || this.match(10)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(17)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(10);\n\n    if (this.match(78)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    while (!this.match(11) && !this.match(21)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    if (this.eat(21)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(11);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType(_ref7) {\n    let {\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact\n    } = _ref7;\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(6)) {\n      this.expect(6);\n      endDelim = 9;\n      exact = true;\n    } else {\n      this.expect(5);\n      endDelim = 8;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStartLoc = null;\n      let inexactStartLoc = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(115)) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          protoStartLoc = this.state.startLoc;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(104)) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(0)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n\n        if (this.eat(0)) {\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(10) || this.match(47)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(98) || this.isContextual(103)) {\n          const lookahead = this.lookahead();\n\n          if (tokenIsLiteralPropertyName(lookahead.type)) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStartLoc = this.state.lastTokStartLoc;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStartLoc && !this.match(8) && !this.match(9)) {\n        this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n          at: inexactStartLoc\n        });\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(21)) {\n      const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(FlowErrors.InexactInsideNonObject, {\n            at: this.state.lastTokStartLoc\n          });\n        } else if (!allowInexact) {\n          this.raise(FlowErrors.InexactInsideExact, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        if (variance) {\n          this.raise(FlowErrors.InexactVariance, {\n            node: variance\n          });\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(FlowErrors.UnexpectedSpreadType, {\n          at: this.state.lastTokStartLoc\n        });\n      }\n\n      if (protoStartLoc != null) {\n        this.unexpected(protoStartLoc);\n      }\n\n      if (variance) {\n        this.raise(FlowErrors.SpreadVariance, {\n          node: variance\n        });\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStartLoc != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.match(47) || this.match(10)) {\n        node.method = true;\n\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, {\n            node: node.value.this\n          });\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(17)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, {\n        node: property.value.this\n      });\n    }\n\n    if (length !== paramCount) {\n      this.raise(property.kind === \"get\" ? ErrorMessages.BadGetterArity : ErrorMessages.BadSetterArity, {\n        node: property\n      });\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(ErrorMessages.BadSetterRestParameter, {\n        node: property\n      });\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(16)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(87);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(0);\n\n    while (this.state.pos < this.length && !this.match(3)) {\n      node.types.push(this.flowParseType());\n      if (this.match(3)) break;\n      this.expect(12);\n    }\n\n    this.expect(3);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === 78;\n\n    if (lh.type === 14 || lh.type === 17) {\n      if (isThis && !first) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, {\n          node\n        });\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(17)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n            node\n          });\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let rest = null;\n    let _this = null;\n\n    if (this.match(78)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    while (!this.match(11) && !this.match(21)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    if (this.eat(21)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case 5:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case 6:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case 0:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case 47:\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n        this.expect(10);\n        tmp = this.flowParseFunctionTypeParams();\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 10:\n        this.next();\n\n        if (!this.match(11) && !this.match(21)) {\n          if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== 17 && token !== 14;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {\n            this.expect(11);\n            return type;\n          } else {\n            this.eat(12);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 129:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case 85:\n      case 86:\n        node.value = this.match(85);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case 53:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(130)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n\n          if (this.match(131)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n\n          throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n            at: this.state.startLoc\n          });\n        }\n\n        throw this.unexpected();\n\n      case 130:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case 131:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case 88:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case 84:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case 78:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case 55:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      case 87:\n        return this.flowParseTypeofType();\n\n      default:\n        if (tokenIsKeyword(this.state.type)) {\n          const label = tokenLabelName(this.state.type);\n          this.next();\n          return super.createIdentifier(node, label);\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (this.isContextual(125)) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(18);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(0);\n\n      if (!optional && this.match(3)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(3);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(17)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(19)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(45);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(45)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(43);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(43)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === 128 && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(14)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(53)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (this.match(14)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.isContextual(125)) {\n      const lookahead = this.lookahead();\n\n      if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(122)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (tokenIsIdentifier(this.state.type)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 122) {\n      return !this.state.containsEsc;\n    }\n\n    return super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 122) {\n      return this.state.containsEsc;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(122)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.match(17)) return expr;\n\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n\n    this.expect(17);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(FlowErrors.AmbiguousConditionalArrow, {\n          at: state.startLoc\n        });\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        noArrowAt.push(valid[0].start);\n        this.state.noArrowAt = noArrowAt;\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(14);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(14);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(126)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(5)) {\n        node.specifiers = this.parseExportSpecifiers(true);\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(127)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(125)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(122)) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(126) && this.lookahead().type === 55) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const {\n      startLoc\n    } = this.state;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(startLoc);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const {\n      startLoc\n    } = this.state;\n\n    if (this.isContextual(121)) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(FlowErrors.DeclareClassElement, {\n          at: startLoc\n        });\n      } else if (member.value) {\n        this.raise(FlowErrors.DeclareClassFieldInitializer, {\n          node: member.value\n        });\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(ErrorMessages.InvalidIdentifier, {\n        at: this.state.curPosition()\n      }, fullWord);\n    }\n\n    this.finishToken(128, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(6, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(code === 62 ? 48 : 47, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(18, 2);\n      }\n\n      return this.finishOp(17, 1);\n    } else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(FlowErrors.TypeCastInPattern, {\n          node: expr.typeAnnotation\n        });\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"TypeCastExpression\") {\n      for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n        args[_key6 - 1] = arguments[_key6];\n      }\n\n      return super.checkLVal(expr, ...args);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(14) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(14) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n\n    delete method.variance;\n\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, {\n          node: method\n        });\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, {\n          node: method\n        });\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n\n    delete method.variance;\n\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.match(47)) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(110)) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(12));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(FlowErrors.GetterMayNotHaveThisParam, {\n          node: param\n        });\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.SetterMayNotHaveThisParam, {\n          node: param\n        });\n      }\n    }\n  }\n\n  parsePropertyNamePrefixOperator(node) {\n    node.variance = this.flowParseVariance();\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.loc.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.match(47) && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(10)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(FlowErrors.PatternIsOptional, {\n          node: param\n        });\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n          node: param\n        });\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(14)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamAnnotationRequired, {\n        node: param\n      });\n    }\n\n    if (this.match(29) && this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamNoDefault, {\n        node: param\n      });\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(FlowErrors.TypeBeforeInitializer, {\n        node: node.typeAnnotation\n      });\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state.type);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(87)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(126)) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n      const {\n        type\n      } = lh;\n\n      if (kind === \"type\" && type === 55) {\n        this.unexpected(null, lh.type);\n      }\n\n      if (isMaybeDefaultImport(type) || type === 5 || type === 55) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    const firstIdent = specifier.imported;\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(93) && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (importedIsString) {\n          throw this.raise(ErrorMessages.ImportBindingIsString, {\n            node: specifier\n          }, firstIdent.value);\n        }\n\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n\n      if (this.eatContextual(93)) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (isInTypeOnlyImport && specifierIsTypeImport) {\n      this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n        node: specifier\n      });\n    }\n\n    if (isInTypeOnlyImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);\n    }\n\n    if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 78:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(14)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(138) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.match(47)) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, {\n              node: typeParameters\n            });\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n        node: typeParameters\n      });\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(19)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow(params) {\n    return this.match(14) || super.shouldParseArrow(params);\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, {\n          node: node.params[i]\n        });\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.match(47)) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(18) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(10);\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(10);\n        node.arguments = this.parseCallExpressionArguments(11, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.match(47)) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(9, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(FlowErrors.UnterminatedFlowComment, {\n        at: this.state.curPosition()\n      });\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        throw this.raise(FlowErrors.NestedFlowComment, {\n          at: this.state.startLoc\n        });\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n\n      if (end === -1) {\n        throw this.raise(ErrorMessages.UnterminatedComment, {\n          at: this.state.curPosition()\n        });\n      }\n\n      this.state.pos = end + 2 + 3;\n      return;\n    }\n\n    return super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(ErrorMessages.UnterminatedComment, {\n        at: this.state.curPosition()\n      });\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(loc, _ref8) {\n    let {\n      enumName,\n      memberName\n    } = _ref8;\n    this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n      at: loc\n    }, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(loc, _ref9) {\n    let {\n      enumName,\n      suppliedType\n    } = _ref9;\n    return this.raise(suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, {\n      at: loc\n    }, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(loc, _ref10) {\n    let {\n      enumName,\n      explicitType,\n      memberName\n    } = _ref10;\n    return this.raise(explicitType === \"boolean\" || explicitType === \"number\" || explicitType === \"string\" ? FlowErrors.EnumInvalidMemberInitializerPrimaryType : explicitType === \"symbol\" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerUnknownType, {\n      at: loc\n    }, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(loc, _ref11) {\n    let {\n      enumName,\n      memberName\n    } = _ref11;\n    this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n      at: loc\n    }, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(node, _ref12) {\n    let {\n      enumName\n    } = _ref12;\n    this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n      node\n    }, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startLoc = this.state.startLoc;\n\n    const endOfInit = () => this.match(12) || this.match(8);\n\n    switch (this.state.type) {\n      case 130:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n\n      case 129:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n\n      case 85:\n      case 86:\n        {\n          const literal = this.parseBooleanLiteral(this.match(85));\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          loc: startLoc\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const loc = this.state.startLoc;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(29) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      loc\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(loc, context);\n    }\n  }\n\n  flowEnumMembers(_ref13) {\n    let {\n      enumName,\n      explicitType\n    } = _ref13;\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(8)) {\n      if (this.eat(21)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.raise(FlowErrors.EnumInvalidMemberName, {\n          node: id\n        }, memberName, memberName[0].toUpperCase() + memberName.slice(1), enumName);\n      }\n\n      if (seenNames.has(memberName)) {\n        this.raise(FlowErrors.EnumDuplicateMemberName, {\n          node: id\n        }, memberName, enumName);\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(8)) {\n        this.expect(12);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, _ref14) {\n    let {\n      enumName\n    } = _ref14;\n\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType(_ref15) {\n    let {\n      enumName\n    } = _ref15;\n\n    if (this.eatContextual(101)) {\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, id) {\n    const enumName = id.name;\n    const nameLoc = id.loc.start;\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(5);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(8);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc\n            }, enumName);\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), id);\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n};\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = makeErrorTemplates({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n}, ErrorCodes.SyntaxError, \"jsx\");\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(JsxErrors.UnterminatedJsxContent, {\n          at: this.state.startLoc\n        });\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.canStartJSXElement) {\n              ++this.state.pos;\n              return this.finishToken(138);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(137, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(ErrorMessages.UnterminatedString, {\n          at: this.state.startLoc\n        });\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(129, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(136, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(136)) {\n      node.name = this.state.value;\n    } else if (tokenIsKeyword(this.state.type)) {\n      node.name = tokenLabelName(this.state.type);\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(14)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(16)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case 5:\n        node = this.startNode();\n        this.setContext(types.brace);\n        this.next();\n        node = this.jsxParseExpressionContainer(node, types.j_oTag);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(JsxErrors.AttributeIsEmpty, {\n            node\n          });\n        }\n\n        return node;\n\n      case 138:\n      case 129:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(JsxErrors.UnsupportedJsxValue, {\n          at: this.state.startLoc\n        });\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEndLoc.index, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.setContext(types.j_oTag);\n    this.expect(8);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node, previousContext) {\n    if (this.match(8)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.setContext(previousContext);\n    this.expect(8);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.match(5)) {\n      this.setContext(types.brace);\n      this.next();\n      this.expect(21);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.setContext(types.j_oTag);\n      this.expect(8);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(139)) {\n      this.expect(139);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(56) && !this.match(139)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(56);\n    this.expect(139);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(139)) {\n      this.expect(139);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(139);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case 138:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(56)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case 137:\n            children.push(this.parseExprAtom());\n            break;\n\n          case 5:\n            {\n              const node = this.startNode();\n              this.setContext(types.brace);\n              this.next();\n\n              if (this.match(21)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node, types.j_expr));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {\n        this.raise(JsxErrors.MissingClosingTagFragment, {\n          node: closingElement\n        });\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(JsxErrors.MissingClosingTagElement, {\n          node: closingElement\n        }, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            node: closingElement\n          }, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.match(47)) {\n      throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n        at: this.state.startLoc\n      });\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  setContext(newContext) {\n    const {\n      context\n    } = this.state;\n    context[context.length - 1] = newContext;\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(137)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(138)) {\n      return this.jsxParseElement();\n    } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.replaceToken(138);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  skipSpace() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) super.skipSpace();\n  }\n\n  getTokenFromCode(code) {\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(139);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(138);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    const {\n      context,\n      type\n    } = this.state;\n\n    if (type === 56 && prevType === 138) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.canStartJSXElement = false;\n    } else if (type === 138) {\n      context.push(types.j_oTag);\n    } else if (type === 139) {\n      const out = context[context.length - 1];\n\n      if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {\n        context.pop();\n        this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;\n      } else {\n        this.setContext(types.j_expr);\n        this.state.canStartJSXElement = true;\n      }\n    } else {\n      this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n    }\n  }\n\n};\n\nclass TypeScriptScope extends Scope {\n  constructor() {\n    super(...arguments);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, loc) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.add(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    const topLevelScope = this.scopeStack[0];\n    const {\n      name\n    } = id;\n\n    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = makeErrorTemplates({\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  AbstractPropertyHasInitializer: \"Property '%0' cannot have an initializer because it is marked abstract.\",\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam: \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion: \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports: \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports: \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\n}, ErrorCodes.SyntaxError, \"typescript\");\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(134) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\n    if (!tokenIsIdentifier(this.state.type)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1) {\n      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n        return undefined;\n      }\n\n      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n        return modifier;\n      }\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate, stopOnStartOfClassStaticBlock) {\n    const enforceOrder = (loc, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(TSErrors.InvalidModifiersOrder, {\n          at: loc\n        }, before, after);\n      }\n    };\n\n    const incompatible = (loc, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(TSErrors.IncompatibleModifiers, {\n          at: loc\n        }, mod1, mod2);\n      }\n    };\n\n    for (;;) {\n      const {\n        startLoc\n      } = this.state;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(TSErrors.DuplicateAccessibilityModifier, {\n            at: startLoc\n          });\n        } else {\n          enforceOrder(startLoc, modifier, modifier, \"override\");\n          enforceOrder(startLoc, modifier, modifier, \"static\");\n          enforceOrder(startLoc, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(TSErrors.DuplicateModifier, {\n            at: startLoc\n          }, modifier);\n        } else {\n          enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"static\", \"override\");\n          enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n          incompatible(startLoc, modifier, \"declare\", \"override\");\n          incompatible(startLoc, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(errorTemplate, {\n          at: startLoc\n        }, modifier);\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(8);\n\n      case \"HeritageClauseElement\":\n        return this.match(5);\n\n      case \"TupleElementTypes\":\n        return this.match(3);\n\n      case \"TypeParametersOrArguments\":\n        return this.match(48);\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {\n    const result = [];\n    let trailingCommaPos = -1;\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      trailingCommaPos = -1;\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(12)) {\n        trailingCommaPos = this.state.lastTokStart;\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(12);\n      }\n\n      return undefined;\n    }\n\n    if (refTrailingCommaPos) {\n      refTrailingCommaPos.value = trailingCommaPos;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(0);\n      } else {\n        this.expect(47);\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);\n\n    if (bracket) {\n      this.expect(3);\n    } else {\n      this.expect(48);\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(83);\n    this.expect(10);\n\n    if (!this.match(129)) {\n      this.raise(TSErrors.UnsupportedImportTypeArgument, {\n        at: this.state.startLoc\n      });\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(11);\n\n    if (this.eat(16)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(16)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(87);\n\n    if (this.match(83)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(81);\n    node.default = this.tsEatThenParseType(29);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.match(47)) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.match(47) || this.match(138)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    const refTrailingCommaPos = {\n      value: -1\n    };\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true, refTrailingCommaPos);\n\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeParameters, {\n        node\n      });\n    }\n\n    if (refTrailingCommaPos.value !== -1) {\n      this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === 75) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === 19;\n    const paramsKey = \"parameters\";\n    const returnTypeKey = \"typeAnnotation\";\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(10);\n    signature[paramsKey] = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(11, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n          node: pattern\n        }, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(12) && !this.isLineTerminator()) {\n      this.expect(13);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(14, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n\n    if (tokenIsIdentifier(this.state.type)) {\n      this.next();\n      return this.match(14);\n    }\n\n    return false;\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(0);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(3);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(17)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(10) || this.match(47)) {\n      if (readonly) {\n        this.raise(TSErrors.ReadonlyForMethodSignature, {\n          node\n        });\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.match(47)) {\n        this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n          at: this.state.curPosition()\n        });\n      }\n\n      this.tsFillSignature(14, method);\n      this.tsParseTypeMemberSemicolon();\n      const paramsKey = \"parameters\";\n      const returnTypeKey = \"typeAnnotation\";\n\n      if (method.kind === \"get\") {\n        if (method[paramsKey].length > 0) {\n          this.raise(ErrorMessages.BadGetterArity, {\n            at: this.state.curPosition()\n          });\n\n          if (this.isThisParam(method[paramsKey][0])) {\n            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n              at: this.state.curPosition()\n            });\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method[paramsKey].length !== 1) {\n          this.raise(ErrorMessages.BadSetterArity, {\n            at: this.state.curPosition()\n          });\n        } else {\n          const firstParameter = method[paramsKey][0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n              at: this.state.curPosition()\n            });\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n              at: this.state.curPosition()\n            });\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n              at: this.state.curPosition()\n            });\n          }\n        }\n\n        if (method[returnTypeKey]) {\n          this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n            node: method[returnTypeKey]\n          });\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(10) || this.match(47)) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(77)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(10) || this.match(47)) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(5);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(8);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(53)) {\n      return this.isContextual(118);\n    }\n\n    if (this.isContextual(118)) {\n      this.next();\n    }\n\n    if (!this.match(0)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(58);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsExpectThenParseType(58);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(5);\n\n    if (this.match(53)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(118);\n    } else if (this.eatContextual(118)) {\n      node.readonly = true;\n    }\n\n    this.expect(0);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(93) ? this.tsParseType() : null;\n    this.expect(3);\n\n    if (this.match(53)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(17);\n    } else if (this.eat(17)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(8);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(TSErrors.OptionalTypeBeforeRequired, {\n          node: elementNode\n        });\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n          node: elementNode\n        });\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(21);\n    let type = this.tsParseType();\n    const optional = this.eat(17);\n    const labeled = this.eat(14);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(TSErrors.InvalidTupleMemberLabel, {\n          node: type\n        });\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(10);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(11);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(19, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case 130:\n        case 131:\n        case 129:\n        case 85:\n        case 86:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(113) && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case 129:\n      case 130:\n      case 131:\n      case 85:\n      case 86:\n        return this.tsParseLiteralTypeNode();\n\n      case 53:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== 130 && nextToken.type !== 131) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case 78:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case 87:\n        return this.tsParseTypeQuery();\n\n      case 83:\n        return this.tsParseImportType();\n\n      case 5:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case 0:\n        return this.tsParseTupleType();\n\n      case 10:\n        return this.tsParseParenthesizedType();\n\n      case 25:\n      case 24:\n        return this.tsParseTemplateLiteralType();\n\n      default:\n        {\n          const {\n            type\n          } = this.state;\n\n          if (tokenIsIdentifier(type) || type === 88 || type === 84) {\n            const nodeType = type === 88 ? \"TSVoidKeyword\" : type === 84 ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n            if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {\n              const node = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n\n            return this.tsParseTypeReference();\n          }\n        }\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(0)) {\n      if (this.match(3)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(3);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(3);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator() {\n    const node = this.startNode();\n    const operator = this.state.value;\n    this.next();\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(TSErrors.UnexpectedReadonly, {\n          node\n        });\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(112);\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n    return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(112) ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), 45);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), 43);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.match(47)) {\n      return true;\n    }\n\n    return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(5)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(5)) {\n          ++braceStackCounter;\n        } else if (this.match(8)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(0)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(0)) {\n          ++braceStackCounter;\n        } else if (this.match(3)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(11) || this.match(21)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {\n        return true;\n      }\n\n      if (this.match(11)) {\n        this.next();\n\n        if (this.match(19)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(78)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(14) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(14);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(113) && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (this.state.type !== 106) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(ErrorMessages.InvalidEscapedReservedWord, {\n        at: this.state.lastTokStartLoc\n      }, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation() {\n    let eatColon = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.startNode();\n    this.tsInType(() => {\n      if (eatColon) this.expect(14);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(81)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(17);\n    node.trueType = this.tsParseType();\n    this.expect(14);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(120) && this.lookahead().type === 77;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(77)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedTypeAssertion, {\n        at: this.state.startLoc\n      });\n    }\n\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expect(48);\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStartLoc = this.state.startLoc;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(TSErrors.EmptyHeritageClauseType, {\n        at: originalStartLoc\n      }, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    } else {\n      node.id = null;\n      this.raise(TSErrors.MissingInterfaceName, {\n        at: this.state.startLoc\n      });\n    }\n\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(81)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(29);\n\n      if (this.isContextual(111) && this.lookahead().type !== 16) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(129) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(29)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(5);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(8);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(5);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node) {\n    let nested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(16)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(109)) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(129)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(5)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(29);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(TSErrors.ImportAliasHasImportType, {\n        node: moduleReference\n      });\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(116) && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(116);\n    this.expect(10);\n\n    if (!this.match(129)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(11);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(99)) {\n      starttype = 74;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      switch (starttype) {\n        case 68:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case 80:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case 75:\n          if (this.match(75) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(75);\n            this.expectContextual(122);\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case 74:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case 109:\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n\n        default:\n          {\n            if (tokenIsIdentifier(starttype)) {\n              return this.tsParseDeclaration(nany, this.state.value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(5)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || tokenIsIdentifier(this.state.type)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(129)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.match(47)) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(19);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArgumentsInExpression() {\n    if (this.reScan_lt() !== 47) {\n      return undefined;\n    }\n\n    return this.tsParseTypeArguments();\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expect(47);\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeArguments, {\n        node\n      });\n    }\n\n    this.expect(48);\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    return tokenIsTSDeclarationStart(this.state.type);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n    let override = false;\n\n    if (allowModifiers !== undefined) {\n      const modified = {};\n      this.tsParseModifiers(modified, [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]);\n      accessibility = modified.accessibility;\n      override = modified.override;\n      readonly = modified.readonly;\n\n      if (allowModifiers === false && (accessibility || readonly || override)) {\n        this.raise(TSErrors.UnexpectedParameterModifier, {\n          at: startLoc\n        });\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(TSErrors.UnsupportedParameterPropertyKind, {\n          node: pp\n        });\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" || type === \"ClassPrivateMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(5) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(TSErrors.DeclareFunctionHasImplementation, {\n        node\n      });\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(TSErrors.UnexpectedTypeAnnotation, {\n          node: node.typeAnnotation\n        });\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike() {\n    const node = super.parseArrayLike(...arguments);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(35)) {\n      this.state.canStartJSXElement = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    let isOptionalCall = false;\n\n    if (this.match(18) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n\n    if (this.match(47) || this.match(51)) {\n      let missingParenErrorLoc;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (typeArguments) {\n          if (isOptionalCall && !this.match(10)) {\n            missingParenErrorLoc = this.state.curPosition();\n            this.unexpected();\n          }\n\n          if (!noCalls && this.eat(10)) {\n            node.arguments = this.parseCallExpressionArguments(11, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (tokenIsTemplate(this.state.type)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n\n      if (missingParenErrorLoc) {\n        this.unexpected(missingParenErrorLoc, 10);\n      }\n\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.match(47) || this.match(51)) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArgumentsInExpression();\n        if (!this.match(10)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(93)) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (tokenIsIdentifier(this.state.type) || this.match(55) || this.match(5)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(126) && ahead.type !== 12 && ahead.type !== 97 && ahead.type !== 29) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (tokenIsIdentifier(this.state.type) && ahead.type === 29) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n        node: importNode\n      });\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(83)) {\n      this.next();\n\n      if (this.isContextual(126) && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(29)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(93)) {\n      const decl = node;\n      this.expectContextual(124);\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(126) && this.lookahead().type === 5) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(120) && this.lookahead().type === 80;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.match(125)) {\n      const interfaceNode = this.startNode();\n      this.next();\n      const result = this.tsParseInterfaceDeclaration(interfaceNode);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === 75) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === 122) {\n        const node = this.startNode();\n        this.next();\n        this.expectContextual(122);\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  tsIsStartOfStaticBlocks() {\n    return this.isContextual(104) && this.lookaheadCharCode() === 123;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const modifiers = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\", \"static\"];\n    this.tsParseModifiers(member, modifiers, undefined, undefined, true);\n\n    const callParseClassMemberWithIsStatic = () => {\n      if (this.tsIsStartOfStaticBlocks()) {\n        this.next();\n        this.next();\n\n        if (this.tsHasSomeModifiers(member, modifiers)) {\n          this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n            at: this.state.curPosition()\n          });\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(TSErrors.IndexSignatureHasAbstract, {\n          node: member\n        });\n      }\n\n      if (member.accessibility) {\n        this.raise(TSErrors.IndexSignatureHasAccessibility, {\n          node: member\n        }, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(TSErrors.IndexSignatureHasDeclare, {\n          node: member\n        });\n      }\n\n      if (member.override) {\n        this.raise(TSErrors.IndexSignatureHasOverride, {\n          node: member\n        });\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n        node: member\n      });\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(TSErrors.OverrideNotInSubClass, {\n          node: member\n        });\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(17);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasReadonly, {\n        node: methodOrProp\n      });\n    }\n\n    if (methodOrProp.declare && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasDeclare, {\n        node: methodOrProp\n      });\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(17)) {\n      return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(121);\n\n    if (isDeclare && (this.isContextual(121) || !this.shouldParseExportDeclaration())) {\n      throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n        at: this.state.startLoc\n      });\n    }\n\n    let declaration;\n\n    if (tokenIsIdentifier(this.state.type)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(110)) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(35)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(29)) {\n      this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n        at: this.state.startLoc\n      });\n    }\n\n    if (node.abstract && this.match(29)) {\n      const {\n        key\n      } = node;\n      this.raise(TSErrors.AbstractPropertyHasInitializer, {\n        at: this.state.startLoc\n      }, key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(TSErrors.PrivateElementHasAbstract, {\n        node\n      });\n    }\n\n    if (node.accessibility) {\n      this.raise(TSErrors.PrivateElementHasAccessibility, {\n        node\n      }, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(TSErrors.ConstructorHasTypeParameters, {\n        node: typeParameters\n      });\n    }\n\n    if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n      this.raise(TSErrors.DeclareAccessor, {\n        node: method\n      }, method.kind);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  declareClassPrivateMethodInScope(node, kind) {\n    if (node.type === \"TSDeclareMethod\") return;\n    if (node.type === \"MethodDefinition\" && !node.value.body) return;\n    super.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && (this.match(47) || this.match(51))) {\n      node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n    }\n\n    if (this.eatContextual(110)) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n\n    for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n      args[_key7 - 1] = arguments[_key7];\n    }\n\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && !this.hasPrecedingLineBreak() && this.eat(35)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(138) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.match(47)) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n\n    if (!arrow.error && !arrow.aborted) {\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  reportReservedArrowTypeParam(node) {\n    var _node$extra;\n\n    if (node.params.length === 1 && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedArrowTypeParam, {\n        node\n      });\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.match(47)) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n        if (this.canInsertSemicolon() || !this.match(19)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(TSErrors.PatternIsOptional, {\n          node: param\n        });\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n\n      case \"TSParameterProperty\":\n        return true;\n\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription) {\n    var _expr$extra2;\n\n    for (var _len9 = arguments.length, args = new Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {\n      args[_key9 - 2] = arguments[_key9];\n    }\n\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSTypeAssertion\":\n        if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\n          this.raise(ErrorMessages.InvalidLhs, {\n            node: expr\n          }, contextDescription);\n          break;\n        }\n\n        this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n        return;\n\n      case \"TSNonNullExpression\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 78:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n      if (this.match(10)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(null, 10);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {\n      this.next();\n      return false;\n    } else {\n      return super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(35) || this.match(14) || super.isClassProperty();\n  }\n\n  parseMaybeDefault() {\n    const node = super.parseMaybeDefault(...arguments);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(TSErrors.TypeAnnotationAfterAssign, {\n        node: node.typeAnnotation\n      });\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType) {\n      if (code === 62) {\n        return this.finishOp(48, 1);\n      }\n\n      if (code === 60) {\n        return this.finishOp(47, 1);\n      }\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  reScan_lt_gt() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 47) {\n      this.state.pos -= 1;\n      this.readToken_lt();\n    } else if (type === 48) {\n      this.state.pos -= 1;\n      this.readToken_gt();\n    }\n  }\n\n  reScan_lt() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 51) {\n      this.state.pos -= 2;\n      this.finishOp(47, 1);\n      return 47;\n    }\n\n    return type;\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, {\n              node: expr\n            });\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow(params) {\n    if (this.match(14)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n\n    return super.shouldParseArrow(params);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      for (var _len10 = arguments.length, args = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {\n        args[_key10 - 1] = arguments[_key10];\n      }\n\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(80)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(125)) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n          node\n        });\n        this.next();\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, 80);\n    }\n  }\n\n  parseMethod() {\n    const method = super.parseMethod(...arguments);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(TSErrors.AbstractMethodHasImplementation, {\n          node: method\n        }, key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n      }\n    }\n\n    return method;\n  }\n\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (!isString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);\n      return this.finishNode(node, \"ExportSpecifier\");\n    }\n\n    node.exportKind = \"value\";\n    return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    if (!importedIsString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n\n    specifier.importKind = \"value\";\n    return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly);\n  }\n\n  parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {\n    const leftOfAsKey = isImport ? \"imported\" : \"local\";\n    const rightOfAsKey = isImport ? \"local\" : \"exported\";\n    let leftOfAs = node[leftOfAsKey];\n    let rightOfAs;\n    let hasTypeSpecifier = false;\n    let canParseAsKeyword = true;\n    const loc = leftOfAs.loc.start;\n\n    if (this.isContextual(93)) {\n      const firstAs = this.parseIdentifier();\n\n      if (this.isContextual(93)) {\n        const secondAs = this.parseIdentifier();\n\n        if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n          rightOfAs = this.parseIdentifier();\n          canParseAsKeyword = false;\n        } else {\n          rightOfAs = secondAs;\n          canParseAsKeyword = false;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        canParseAsKeyword = false;\n        rightOfAs = this.parseIdentifier();\n      } else {\n        hasTypeSpecifier = true;\n        leftOfAs = firstAs;\n      }\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      hasTypeSpecifier = true;\n      leftOfAs = this.parseIdentifier();\n    }\n\n    if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n      this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, {\n        at: loc\n      });\n    }\n\n    node[leftOfAsKey] = leftOfAs;\n    node[rightOfAsKey] = rightOfAs;\n    const kindKey = isImport ? \"importKind\" : \"exportKind\";\n    node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n    if (canParseAsKeyword && this.eatContextual(93)) {\n      node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n    }\n\n    if (!node[rightOfAsKey]) {\n      node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n    }\n\n    if (isImport) {\n      this.checkLVal(node[rightOfAsKey], \"import specifier\", BIND_LEXICAL);\n    }\n  }\n\n};\n\nconst PlaceholderErrors = makeErrorTemplates({\n  ClassNameIsRequired: \"A class name is required.\"\n}, ErrorCodes.SyntaxError, \"placeholders\");\n\nvar placeholders = superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(140)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(140);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(140, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(99)) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === 140) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(14)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(81) || this.match(140) || this.match(5)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n          at: this.state.startLoc\n        });\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(97) && !this.match(12)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(65)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(tokenLabelName(140), this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(97) && !this.match(12)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(12)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(97);\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n};\n\nvar v8intrinsic = superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(54)) {\n      const v8IntrinsicStartLoc = this.state.startLoc;\n      const node = this.startNode();\n      this.next();\n\n      if (tokenIsIdentifier(this.state.type)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(10)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStartLoc);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n};\n\nfunction hasPlugin(plugins, expectedConfig) {\n  const [expectedName, expectedOptions] = typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n  const expectedKeys = Object.keys(expectedOptions);\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n\n      if (pluginName !== expectedName) {\n        return false;\n      }\n\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\"recordAndTuple\", {\n      syntaxType: \"hash\"\n    }]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startColumn: 0,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true\n};\n\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(ErrorMessages.InvalidParenthesizedAssignment, node.loc.start);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(ErrorMessages.InvalidParenthesizedAssignment, {\n            node\n          });\n        }\n      } else {\n        this.raise(ErrorMessages.InvalidParenthesizedAssignment, {\n          node\n        });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {\n            this.raise(ErrorMessages.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc\n            });\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        {\n          const {\n            key,\n            value\n          } = node;\n\n          if (this.isPrivateName(key)) {\n            this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n          }\n\n          this.toAssignable(value, isLHS);\n          break;\n        }\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(ErrorMessages.MissingEqInAssignment, {\n            at: node.left.loc.end\n          });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod, {\n        node: prop.key\n      });\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raise(ErrorMessages.RestTrailingComma, {\n        node: prop\n      });\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaLoc) {\n          this.raise(ErrorMessages.RestTrailingComma, {\n            at: trailingCommaLoc\n          });\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raise(ErrorMessages.RestTrailingComma, {\n            node: elt\n          });\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 0:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(3, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case 5:\n        return this.parseObjectLike(8, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n      }\n\n      if (allowEmpty && this.match(12)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(21)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n\n        if (this.match(26) && this.hasPlugin(\"decorators\")) {\n          this.raise(ErrorMessages.UnsupportedParameterDecorator, {\n            at: this.state.startLoc\n          });\n        }\n\n        while (this.match(26)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseBindingRestProperty(prop) {\n    this.next();\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(125);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  parseBindingProperty() {\n    const prop = this.startNode();\n    const {\n      type,\n      start: startPos,\n      startLoc\n    } = this.state;\n\n    if (type === 21) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === 134) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n\n    prop.method = false;\n    this.parseObjPropValue(prop, startPos, startLoc, false, false, true, false);\n    return prop;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(29)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription) {\n    let bindingType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BIND_NONE;\n    let checkClashes = arguments.length > 3 ? arguments[3] : undefined;\n    let disallowLetBinding = arguments.length > 4 ? arguments[4] : undefined;\n    let strictModeChanged = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, {\n              node: expr\n            }, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(ErrorMessages.ParamDupe, {\n                node: expr\n              });\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(ErrorMessages.LetInLexicalBinding, {\n              node: expr\n            });\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.loc.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(ErrorMessages.InvalidPropertyBindingPattern, {\n            node: expr\n          });\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, {\n            node: expr\n          }, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(ErrorMessages.InvalidRestAssignmentPattern, {\n        node: node.argument\n      });\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (!this.match(12)) {\n      return false;\n    }\n\n    this.raise(this.lookaheadCharCode() === close ? ErrorMessages.RestTrailingComma : ErrorMessages.ElementAfterRest, {\n      at: this.state.startLoc\n    });\n    return true;\n  }\n\n}\n\nconst invalidHackPipeBodies = new Map([[\"ArrowFunctionExpression\", \"arrow function\"], [\"AssignmentExpression\", \"assignment\"], [\"ConditionalExpression\", \"conditional\"], [\"YieldExpression\", \"yield\"]]);\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(ErrorMessages.RecordNoProto, {\n          node: key\n        });\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(ErrorMessages.DuplicateProto, {\n            node: key\n          });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(135)) {\n      this.unexpected();\n    }\n\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(12)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(12)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$loc;\n\n    refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(105)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    const {\n      type\n    } = this.state;\n\n    if (type === 10 || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(29)) {\n        node.left = this.toAssignable(left, true);\n\n        if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startPos) {\n          refExpressionErrors.doubleProtoLoc = null;\n        }\n\n        if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startPos) {\n          refExpressionErrors.shorthandAssignLoc = null;\n        }\n\n        if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startPos) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null;\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (this.eat(17)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(14);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(refExpressionErrors) {\n    return this.match(134) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (this.isPrivateName(left)) {\n      const value = this.getPrivateNameSV(left);\n\n      if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {\n        this.raise(ErrorMessages.PrivateInExpectedIn, {\n          node: left\n        }, value);\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {\n      let prec = tokenOperatorPrecedence(op);\n\n      if (prec > minPrec) {\n        if (op === 39) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === 41 || op === 42;\n        const coalesce = op === 40;\n\n        if (coalesce) {\n          prec = tokenOperatorPrecedence(42);\n        }\n\n        this.next();\n\n        if (op === 39 && this.hasPlugin([\"pipelineOperator\", {\n          proposal: \"minimal\"\n        }])) {\n          if (this.state.type === 96 && this.prodParam.hasAwait) {\n            throw this.raise(ErrorMessages.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {\n          throw this.raise(ErrorMessages.MixingCoalesceWithLogical, {\n            at: this.state.startLoc\n          });\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case 39:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(105)) {\n                throw this.raise(ErrorMessages.PipeBodyIsTighter, {\n                  at: this.state.startLoc\n                }, this.state.value);\n              }\n\n              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\n  }\n\n  parseHackPipeBody() {\n    var _body$extra;\n\n    const {\n      startLoc\n    } = this.state;\n    const body = this.parseMaybeAssign();\n\n    if (invalidHackPipeBodies.has(body.type) && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\n      this.raise(ErrorMessages.PipeUnparenthesizedBody, {\n        at: startLoc\n      }, invalidHackPipeBodies.get(body.type));\n    }\n\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(ErrorMessages.PipeTopicUnused, {\n        at: startLoc\n      });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(57)) {\n      this.raise(ErrorMessages.UnexpectedTokenUnaryExponentiation, {\n        node: node.argument\n      });\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(96);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    const update = this.match(34);\n    const node = this.startNode();\n\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(72)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(89);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(ErrorMessages.StrictDelete, {\n            node\n          });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(ErrorMessages.DeletePrivateField, {\n            node\n          });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const {\n        type\n      } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startLoc, ErrorMessages.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const {\n      type\n    } = this.state;\n\n    if (!noCalls && type === 15) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === 18) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(10)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else {\n      const computed = this.eat(0);\n\n      if (computed || optional || this.eat(16)) {\n        return this.parseMember(base, startPos, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, computed, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(3);\n    } else if (this.match(134)) {\n      if (base.type === \"Super\") {\n        this.raise(ErrorMessages.SuperPrivateField, {\n          at: startLoc\n        });\n      }\n\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next();\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    const {\n      maybeAsyncArrow,\n      optionalChainMember\n    } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(11);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(11, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n\n    this.finishCallExpression(node, optionalChainMember);\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(ErrorMessages.OptionalChainingNoTemplate, {\n        at: startLoc\n      });\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(ErrorMessages.ImportCallArity, {\n          node\n        }, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(ErrorMessages.ImportCallSpreadArgument, {\n              node: arg\n            });\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(ErrorMessages.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(19) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(19);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);\n\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    let node;\n    const {\n      type\n    } = this.state;\n\n    switch (type) {\n      case 79:\n        return this.parseSuper();\n\n      case 83:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(16)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(10)) {\n          this.raise(ErrorMessages.UnsupportedImport, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case 78:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case 90:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n\n      case 56:\n      case 31:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n\n      case 130:\n        return this.parseNumericLiteral(this.state.value);\n\n      case 131:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case 132:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case 129:\n        return this.parseStringLiteral(this.state.value);\n\n      case 84:\n        return this.parseNullLiteral();\n\n      case 85:\n        return this.parseBooleanLiteral(true);\n\n      case 86:\n        return this.parseBooleanLiteral(false);\n\n      case 10:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n\n      case 2:\n      case 1:\n        {\n          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);\n        }\n\n      case 0:\n        {\n          return this.parseArrayLike(3, true, false, refExpressionErrors);\n        }\n\n      case 6:\n      case 7:\n        {\n          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);\n        }\n\n      case 5:\n        {\n          return this.parseObjectLike(8, false, false, refExpressionErrors);\n        }\n\n      case 68:\n        return this.parseFunctionOrFunctionSent();\n\n      case 26:\n        this.parseDecorators();\n\n      case 80:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case 77:\n        return this.parseNewOrNewTarget();\n\n      case 25:\n      case 24:\n        return this.parseTemplate(false);\n\n      case 15:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(ErrorMessages.UnsupportedBind, {\n              node: callee\n            });\n          }\n        }\n\n      case 134:\n        {\n          this.raise(ErrorMessages.PrivateInExpectedIn, {\n            at: this.state.startLoc\n          }, this.state.value);\n          return this.parsePrivateName();\n        }\n\n      case 33:\n        {\n          return this.parseTopicReferenceThenEqualsSign(54, \"%\");\n        }\n\n      case 32:\n        {\n          return this.parseTopicReferenceThenEqualsSign(44, \"^\");\n        }\n\n      case 37:\n      case 38:\n        {\n          return this.parseTopicReference(\"hack\");\n        }\n\n      case 44:\n      case 54:\n      case 27:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n          if (pipeProposal) {\n            return this.parseTopicReference(pipeProposal);\n          } else {\n            throw this.unexpected();\n          }\n        }\n\n      case 47:\n        {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            break;\n          } else {\n            throw this.unexpected();\n          }\n        }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (this.isContextual(123) && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n            return this.parseModuleExpression();\n          }\n\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            const {\n              type\n            } = this.state;\n\n            if (type === 68) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (tokenIsIdentifier(type)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (type === 90) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n\n    }\n  }\n\n  parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      this.state.pos--;\n      this.state.end--;\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  parseTopicReference(pipeProposal) {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n    this.next();\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  finishTopicReference(node, startLoc, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {\n      const nodeType = pipeProposal === \"smart\" ? \"PipelinePrimaryTopicReference\" : \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(pipeProposal === \"smart\" ? ErrorMessages.PrimaryTopicNotAllowed : ErrorMessages.PipeTopicUnbound, {\n          at: startLoc\n        });\n      }\n\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(ErrorMessages.PipeTopicUnconfiguredToken, {\n        at: startLoc\n      }, tokenLabelName(tokenType));\n    }\n  }\n\n  testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          return this.hasPlugin([\"pipelineOperator\", {\n            topicToken: tokenLabelName(tokenType)\n          }]);\n        }\n\n      case \"smart\":\n        return tokenType === 27;\n\n      default:\n        throw this.raise(ErrorMessages.PipeTopicRequiresHackPipes, {\n          at: startLoc\n        });\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(ErrorMessages.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition()\n      });\n    }\n\n    this.expect(19);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(ErrorMessages.SuperNotAllowed, {\n        node\n      });\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(ErrorMessages.UnexpectedSuper, {\n        node\n      });\n    }\n\n    if (!this.match(10) && !this.match(0) && !this.match(16)) {\n      this.raise(ErrorMessages.UnsupportedSuper, {\n        node\n      });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart, this.state.start + 1));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n\n      if (this.match(102)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(ErrorMessages.UnsupportedMetaProperty, {\n        node: node.property\n      }, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(100)) {\n      if (!this.inModule) {\n        this.raise(SourceTypeModuleErrorMessages.ImportMetaOutsideModule, {\n          node: id\n        });\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(11)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);\n\n        if (this.match(11)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(21)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n\n        if (!this.checkCommaAfterRest(41)) {\n          break;\n        }\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(11);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      this.takeSurroundingComments(val, startPos, this.state.lastTokEndLoc.index);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(19)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(ErrorMessages.UnexpectedNewTarget, {\n          node: metaProp\n        });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(ErrorMessages.ImportCallNotNewExpression, {\n        node: node.callee\n      });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(ErrorMessages.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc\n      });\n    } else if (this.eat(18)) {\n      this.raise(ErrorMessages.OptionalChainingNoNew, {\n        at: this.state.startLoc\n      });\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(10)) {\n      const args = this.parseExprList(11);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const {\n      start,\n      startLoc,\n      end,\n      value\n    } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(elemStart, createPositionWithColumnOffset(startLoc, 1));\n\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(ErrorMessages.InvalidEscapeSequenceTemplate, {\n          at: createPositionWithColumnOffset(startLoc, 2)\n        });\n      }\n    }\n\n    const isTail = this.match(24);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset)\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(elem, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));\n    return elem;\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(ErrorMessages.InvalidRecordProperty, {\n          node: prop\n        });\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node) {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));\n  }\n\n  parsePropertyDefinition(refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(ErrorMessages.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc\n        });\n      }\n\n      while (this.match(26)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(21)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(55);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(55);\n        this.parsePropertyName(prop);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n\n        if (this.match(55)) {\n          isGenerator = true;\n          this.raise(ErrorMessages.AccessorIsGenerator, {\n            at: this.state.curPosition()\n          }, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(method.kind === \"get\" ? ErrorMessages.BadGetterArity : ErrorMessages.BadSetterArity, {\n        node: method\n      });\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(ErrorMessages.BadSetterRestParameter, {\n        node: method\n      });\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(10)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(14)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(29)) {\n        const shorthandAssignLoc = this.state.startLoc;\n\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(ErrorMessages.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc\n          });\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, refExpressionErrors) {\n    if (this.eat(0)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(3);\n    } else {\n      const {\n        type,\n        value\n      } = this.state;\n      let key;\n\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case 130:\n            key = this.parseNumericLiteral(value);\n            break;\n\n          case 129:\n            key = this.parseStringLiteral(value);\n            break;\n\n          case 131:\n            key = this.parseBigIntLiteral(value);\n            break;\n\n          case 132:\n            key = this.parseDecimalLiteral(value);\n            break;\n\n          case 134:\n            {\n              const privateKeyLoc = this.state.startLoc;\n\n              if (refExpressionErrors != null) {\n                if (refExpressionErrors.privateKeyLoc === null) {\n                  refExpressionErrors.privateKeyLoc = privateKeyLoc;\n                }\n              } else {\n                this.raise(ErrorMessages.UnexpectedPrivateField, {\n                  at: privateKeyLoc\n                });\n              }\n\n              key = this.parsePrivateName();\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      prop.key = key;\n\n      if (type !== 134) {\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n    let inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaLoc) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(5) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaLoc) {\n    node.params = this.toAssignableList(params, trailingCommaLoc, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const isExpression = allowExpression && !this.match(5);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorOrigin = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? {\n            at: node.key.loc.end\n          } : {\n            node\n          };\n          this.raise(ErrorMessages.IllegalLanguageModeDirective, errorOrigin);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.expressionScope.exit();\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    let strictModeChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const checkClashes = new Set();\n\n    for (const param of node.params) {\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n\n    if (this.match(12)) {\n      if (!allowEmpty) {\n        this.raise(ErrorMessages.UnexpectedToken, {\n          at: this.state.curPosition()\n        }, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(21)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(17)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(ErrorMessages.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc\n        });\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      startLoc,\n      type\n    } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      if (tokenIsKeyword) {\n        this.replaceToken(128);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(ErrorMessages.YieldBindingIdentifier, {\n          at: startLoc\n        });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(ErrorMessages.AwaitBindingIdentifier, {\n          at: startLoc\n        });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(ErrorMessages.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(ErrorMessages.AwaitBindingIdentifier, startLoc);\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(ErrorMessages.ArgumentsInClass, {\n          at: startLoc\n        });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(ErrorMessages.UnexpectedKeyword, {\n        at: startLoc\n      }, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(ErrorMessages.UnexpectedReservedWord, {\n        at: startLoc\n      }, word);\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(node.loc.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(55)) {\n      this.raise(ErrorMessages.ObsoleteAwaitStar, {\n        node\n      });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    if (this.hasPrecedingLineBreak()) return true;\n    const {\n      type\n    } = this.state;\n    return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 133 || type === 56 || this.hasPlugin(\"v8intrinsic\") && type === 54;\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.loc.start, ErrorMessages.YieldInParameter);\n    this.next();\n    let delegating = false;\n    let argument = null;\n\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(55);\n\n      switch (this.state.type) {\n        case 13:\n        case 135:\n        case 8:\n        case 11:\n        case 3:\n        case 9:\n        case 14:\n        case 12:\n          if (!delegating) break;\n\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartLoc) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(ErrorMessages.PipelineHeadSequenceExpression, {\n          at: leftStartLoc\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc) {\n    if (this.match(19)) {\n      throw this.raise(ErrorMessages.PipelineBodyNoArrow, {\n        at: this.state.startLoc\n      });\n    }\n\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(ErrorMessages.PipelineTopicUnused, {\n        at: startLoc\n      });\n    }\n  }\n\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSmartMixTopicForbiddingContext(callback) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(5);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, 8, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(8);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n  parsePropertyNamePrefixOperator(prop) {}\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const {\n      type\n    } = token;\n\n    if (typeof type === \"number\") {\n      {\n        if (type === 134) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(i, 1, new Token({\n            type: getExportedToken(27),\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc\n          }), new Token({\n            type: getExportedToken(128),\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end\n          }));\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n\n          if (input.charCodeAt(start) === 96) {\n            startToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          } else {\n            startToken = new Token({\n              type: getExportedToken(8),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          }\n\n          let templateValue, templateElementEnd, templateElementEndLoc, endToken;\n\n          if (type === 24) {\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          } else {\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              type: getExportedToken(23),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          }\n\n          tokens.splice(i, 1, startToken, new Token({\n            type: getExportedToken(20),\n            value: templateValue,\n            start: backquoteEnd,\n            end: templateElementEnd,\n            startLoc: backquoteEndLoc,\n            endLoc: templateElementEndLoc\n          }), endToken);\n          i += 2;\n          continue;\n        }\n      }\n      token.type = getExportedToken(type);\n    }\n  }\n\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program) {\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 135;\n    let sourceType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.options.sourceType;\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [name, loc] of Array.from(this.scope.undefinedExports)) {\n        this.raise(ErrorMessages.ModuleExportUndefined, {\n          at: loc\n        }, name);\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(28)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(99)) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(26)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = 74;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case 60:\n        return this.parseBreakContinueStatement(node, true);\n\n      case 63:\n        return this.parseBreakContinueStatement(node, false);\n\n      case 64:\n        return this.parseDebuggerStatement(node);\n\n      case 90:\n        return this.parseDoStatement(node);\n\n      case 91:\n        return this.parseForStatement(node);\n\n      case 68:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(ErrorMessages.StrictFunction, {\n              at: this.state.startLoc\n            });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(ErrorMessages.SloppyFunction, {\n              at: this.state.startLoc\n            });\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case 80:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case 69:\n        return this.parseIfStatement(node);\n\n      case 70:\n        return this.parseReturnStatement(node);\n\n      case 71:\n        return this.parseSwitchStatement(node);\n\n      case 72:\n        return this.parseThrowStatement(node);\n\n      case 73:\n        return this.parseTryStatement(node);\n\n      case 75:\n      case 74:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(ErrorMessages.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc\n          });\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case 92:\n        return this.parseWhileStatement(node);\n\n      case 76:\n        return this.parseWithStatement(node);\n\n      case 5:\n        return this.parseBlock();\n\n      case 13:\n        return this.parseEmptyStatement(node);\n\n      case 83:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case 82:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(ErrorMessages.UnexpectedImportExport, {\n              at: this.state.startLoc\n            });\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === 83) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(ErrorMessages.AsyncFunctionInSingleStatementContext, {\n                at: this.state.startLoc\n              });\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (tokenIsIdentifier(starttype) && expr.type === \"Identifier\" && this.eat(14)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(SourceTypeModuleErrorMessages.ImportOutsideModule, {\n        node\n      });\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(80);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(26)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(82)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(ErrorMessages.DecoratorExportClass, {\n          at: this.state.startLoc\n        });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(ErrorMessages.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc\n      });\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(10)) {\n        expr = this.parseExpression();\n        this.expect(11);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(16)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(10)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, isBreak) {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, isBreak) {\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(ErrorMessages.IllegalBreakContinue, {\n        node\n      }, isBreak ? \"break\" : \"continue\");\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(10);\n    const val = this.parseExpression();\n    this.expect(11);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(92);\n    node.test = this.parseHeaderExpression();\n    this.eat(13);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(96)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(10);\n\n    if (this.match(13)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(99);\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(74) || this.match(75) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(58) || this.isContextual(101)) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithAsync = this.isContextual(95);\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(101);\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(ErrorMessages.ForOfLet, {\n          node: init\n        });\n      }\n\n      if (awaitAt === null && startsWithAsync && init.type === \"Identifier\") {\n        this.raise(ErrorMessages.ForOfAsync, {\n          node: init\n        });\n      }\n    }\n\n    if (isForOf || this.match(58)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(66) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(ErrorMessages.IllegalReturn, {\n        at: this.state.startLoc\n      });\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(5);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(8);) {\n      if (this.match(61) || this.match(65)) {\n        const isCase = this.match(61);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(ErrorMessages.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(14);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(ErrorMessages.NewlineAfterThrow, {\n        at: this.state.lastTokEndLoc\n      });\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(62)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(10)) {\n        this.expect(10);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(11);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(67) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(ErrorMessages.NoCatchOrFinally, {\n        node\n      });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(ErrorMessages.StrictWith, {\n        at: this.state.startLoc\n      });\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(ErrorMessages.LabelRedeclaration, {\n          node: expr\n        }, maybeName);\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type) ? \"loop\" : this.match(71) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock() {\n    let allowDirectives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let createNewLexicalScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let afterBlockParse = arguments.length > 2 ? arguments[2] : undefined;\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(5);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(13) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(11) ? null : this.parseExpression();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(58);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(ErrorMessages.ForInOfLoopInitializer, {\n        node: init\n      }, isForIn ? \"for-in\" : \"for-of\");\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(ErrorMessages.InvalidLhs, {\n        node: init\n      }, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(29)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(58) || this.isContextual(101))) {\n          if (!isTypescript) {\n            this.raise(ErrorMessages.DeclarationMissingInitializer, {\n              at: this.state.lastTokEndLoc\n            }, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(58) || this.isContextual(101)))) {\n          this.raise(ErrorMessages.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc\n          }, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(12)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node) {\n    let statement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FUNC_NO_FLAGS;\n    let isAsync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(55) && isHangingStatement) {\n      this.raise(ErrorMessages.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc\n      });\n    }\n\n    node.generator = this.eat(55);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(10);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(11, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.loc.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(29) || this.match(13) || this.match(8);\n  }\n\n  isClassMethod() {\n    return this.match(10);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(5);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(8)) {\n        if (this.eat(13)) {\n          if (decorators.length > 0) {\n            throw this.raise(ErrorMessages.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc\n            });\n          }\n\n          continue;\n        }\n\n        if (this.match(26)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(ErrorMessages.DecoratorConstructor, {\n            node: member\n          });\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(ErrorMessages.TrailingDecorator, {\n        at: this.state.startLoc\n      });\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(104);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(5)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const accessorProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(55)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(134);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(ErrorMessages.ConstructorIsGenerator, {\n          node: publicMethod.key\n        });\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(134);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(ErrorMessages.DuplicateConstructor, {\n            node: key\n          });\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(ErrorMessages.OverrideOnConstructor, {\n            node: key\n          });\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(55);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(134);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(ErrorMessages.ConstructorIsAsync, {\n            node: publicMethod.key\n          });\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(55) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      const isPrivate = this.match(134);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(ErrorMessages.ConstructorIsAccessor, {\n            node: publicMethod.key\n          });\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (isContextual && key.name === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n      const isPrivate = this.match(134);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value\n    } = this.state;\n\n    if ((type === 128 || type === 129) && member.static && value === \"prototype\") {\n      this.raise(ErrorMessages.StaticPrototype, {\n        at: this.state.startLoc\n      });\n    }\n\n    if (type === 134) {\n      if (value === \"constructor\") {\n        this.raise(ErrorMessages.ConstructorClassPrivateField, {\n          at: this.state.startLoc\n        });\n      }\n\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, 8);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(ErrorMessages.DecoratorStaticBlock, {\n        node: member\n      });\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(ErrorMessages.ConstructorClassField, {\n        node: prop.key\n      });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n  }\n\n  pushClassAccessorProperty(classBody, prop, isPrivate) {\n    if (!isPrivate && !prop.computed) {\n      const key = prop.key;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        this.raise(ErrorMessages.ConstructorClassField, {\n          node: key\n        });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n    }\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(node, kind) {\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    let bindingType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BIND_CLASS;\n\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(ErrorMessages.MissingClassName, {\n          at: this.state.startLoc\n        });\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(12);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, 5);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(65)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, 5);\n  }\n\n  eatExportStar(node) {\n    return this.eat(55);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(93)) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(5)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node.source = null;\n      node.declaration = null;\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(95)) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(68) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    }\n\n    if (this.match(80)) {\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(ErrorMessages.DecoratorBeforeExport, {\n          at: this.state.startLoc\n        });\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(75) || this.match(74) || this.isLet()) {\n      throw this.raise(ErrorMessages.UnsupportedDefaultExport, {\n        at: this.state.startLoc\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsIdentifier(type)) {\n      if (type === 95 && !this.state.containsEsc || type === 99) {\n        return false;\n      }\n\n      if ((type === 126 || type === 125) && !this.state.containsEsc) {\n        const {\n          type: nextType\n        } = this.lookahead();\n\n        if (tokenIsIdentifier(nextType) && nextType !== 97 || nextType === 5) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(65)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(65) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(97)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 26) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(ErrorMessages.DecoratorBeforeExport, {\n            at: this.state.startLoc\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(ErrorMessages.ExportDefaultFromAsIdentifier, {\n              node: declaration\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type !== \"Identifier\") {\n              this.raise(ErrorMessages.ExportBindingIsString, {\n                node: specifier\n              }, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(ErrorMessages.UnsupportedDecoratorExport, {\n        node\n      });\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, {\n        node\n      }, name);\n    }\n\n    this.exportedIdentifiers.add(name);\n  }\n\n  parseExportSpecifiers(isInTypeExport) {\n    const nodes = [];\n    let first = true;\n    this.expect(5);\n\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n\n      const isMaybeTypeOnly = this.isContextual(126);\n      const isString = this.match(129);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (this.eatContextual(93)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n\n    return this.finishNode(node, \"ExportSpecifier\");\n  }\n\n  parseModuleExportName() {\n    if (this.match(129)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(ErrorMessages.ModuleExportNameHasLoneSurrogate, {\n          node: result\n        }, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(129)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(12);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(97);\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(129)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(8)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (attrNames.has(keyName)) {\n        this.raise(ErrorMessages.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc\n        }, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (this.match(129)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(14);\n\n      if (!this.match(129)) {\n        throw this.raise(ErrorMessages.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc\n        });\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(12));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(76) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(ErrorMessages.ModuleAttributeDifferentFromType, {\n          node: node.key\n        }, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(ErrorMessages.ModuleAttributesWithDuplicateKeys, {\n          node: node.key\n        }, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(14);\n\n      if (!this.match(129)) {\n        throw this.raise(ErrorMessages.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc\n        });\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(12));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(5);\n    const attrs = this.parseAssertEntries();\n    this.eat(8);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(55)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(93);\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(5);\n\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(14)) {\n          throw this.raise(ErrorMessages.DestructureNamedImport, {\n            at: this.state.startLoc\n          });\n        }\n\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(129);\n      const isMaybeTypeOnly = this.isContextual(126);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === \"type\" || node.importKind === \"typeof\", isMaybeTypeOnly);\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    if (this.eatContextual(93)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (importedIsString) {\n        throw this.raise(ErrorMessages.ImportBindingIsString, {\n          node: specifier\n        }, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n\n  return tokenTypes;\n}\n\nconst tokTypes = generateExportedTokenTypes(tt);\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = tokTypes;","map":{"version":3,"mappings":"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","names":["BaseParser","constructor","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","pluginConfig","plugins","has","pluginName","pluginOptions","actualOptions","get","key","Object","keys","getPluginOption","plugin","name","_this$plugins$get","setTrailingComments","node","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","i","length","start","CommentsParser","addComment","comment","filename","loc","state","push","processComment","commentStack","commentStackLength","lastCommentWS","end","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","type","properties","arguments","params","specifiers","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","ErrorCodes","freeze","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","keepReasonCodeCompat","reasonCode","syntaxPlugin","messages","code","templates","forEach","template","ParserError","raise","origin","raiseWithData","at","raiseOverwrite","pos","index","message","replace","_","line","column","options","errorRecovery","errors","error","assign","_raise","data","errorTemplate","errorContext","err","isLookahead","defineProperty","toUnenumerable","object","enumerable","value","toESTreeLocation","superClass","parse","file","tokens","map","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","bigint","String","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","isValidDirective","_stmt$expression$extr","parenthesized","parseBlockBody","args","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parsePrivateName","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","startLoc","refExpressionErrors","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","Errors","finishCallExpression","optional","callee","source","attributes","toReferencedArguments","parseExport","exported","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","endLoc","resetEndLocation","lastTokEndLoc","TokContext","token","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","ExportedTokenType","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","set","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","Position","col","SourceLocation","identifierName","createPositionWithColumnOffset","position","columnOffset","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","lastTokStartLoc","lastTokStart","ct","canStartJSXElement","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","clone","skipArrays","val","Array","isArray","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","ParserErrors","pushToken","checkKeywordEscapes","nextToken","eat","match","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","indexOf","skipLineComment","startSkip","ch","spaceStart","loop","attachComment","CommentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","unexpected","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","fromCodePoint","str","readRegexp","escaped","content","mods","char","includes","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","invalid","total","Infinity","prev","Number","isNaN","_isDigit","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","readCodePoint","throwOnInvalid","readHexChar","quote","out","chunkStart","readEscapedChar","readTemplateContinuation","containsInvalid","inTemplate","codePos","substr","octalStr","octal","codeLoc","n","firstCode","escStart","identifierCheck","esc","keywordTypes","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","assertNoSpace","getPluginNamesFromConfigs","pluginConfigs","c","missingPlugin","JSON","stringify","expectOnePlugin","some","join","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","bind","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","parser","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocation","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","_node$extra","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","exprList","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","checkLVal","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","contextDescription","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","_arrowExpression$extr","maybeUnwrapTypeCastExpression","async","_jsx2","_jsx3","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","count","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","AbstractPropertyHasInitializer","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","modifier","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStartLoc","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","interfaceNode","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","modifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","typeCast","_jsx","reportReservedArrowTypeParam","_typeCast","_typeCast2","_typeCast3","trailingComma","toAssignableParenthesizedExpression","_expr$extra2","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","kindKey","parseModuleExportName","PlaceholderErrors","ClassNameIsRequired","parsePlaceholder","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","last","isLast","_node$extra2","checkToRestConversion","arg","_node$extra3","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","checkClashes","disallowLetBinding","strictModeChanged","elem","invalidHackPipeBodies","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","_body$extra","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","tokenType","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","propertyName","SourceTypeModuleErrors","innerStartPos","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartPos","spreadNodeStartLoc","innerEndLoc","arrowNode","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorOrigin","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","stmtToDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","declarations","parseForIn","startsWithAsync","isForOf","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","_member$decorators","parseClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkNames","isDefault","isFrom","_declaration$extra","exportedName","nodes","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"sources":["/home/haziz1/node_modules/@babel/parser/src/parser/base.js","/home/haziz1/node_modules/@babel/parser/src/parser/comments.js","/home/haziz1/node_modules/@babel/parser/src/parser/error-codes.js","/home/haziz1/node_modules/@babel/parser/src/parser/error-message.js","/home/haziz1/node_modules/@babel/parser/src/parser/error.js","/home/haziz1/node_modules/@babel/parser/src/plugins/estree.js","/home/haziz1/node_modules/@babel/parser/src/tokenizer/context.js","/home/haziz1/node_modules/@babel/parser/src/tokenizer/types.js","/home/haziz1/node_modules/@babel/parser/src/util/location.js","/home/haziz1/node_modules/@babel/babel-helper-validator-identifier/src/identifier.ts","/home/haziz1/node_modules/@babel/babel-helper-validator-identifier/src/keyword.ts","/home/haziz1/node_modules/@babel/parser/src/util/identifier.js","/home/haziz1/node_modules/@babel/parser/src/util/scopeflags.js","/home/haziz1/node_modules/@babel/parser/src/util/scope.js","/home/haziz1/node_modules/@babel/parser/src/plugins/flow/scope.js","/home/haziz1/node_modules/@babel/parser/src/util/whitespace.js","/home/haziz1/node_modules/@babel/parser/src/tokenizer/state.js","/home/haziz1/node_modules/@babel/parser/src/tokenizer/index.js","/home/haziz1/node_modules/@babel/parser/src/util/class-scope.js","/home/haziz1/node_modules/@babel/parser/src/util/expression-scope.js","/home/haziz1/node_modules/@babel/parser/src/util/production-parameter.js","/home/haziz1/node_modules/@babel/parser/src/parser/util.js","/home/haziz1/node_modules/@babel/parser/src/parser/node.js","/home/haziz1/node_modules/@babel/parser/src/plugins/flow/index.js","/home/haziz1/node_modules/@babel/parser/src/plugins/jsx/xhtml.js","/home/haziz1/node_modules/@babel/parser/src/plugins/jsx/index.js","/home/haziz1/node_modules/@babel/parser/src/plugins/typescript/scope.js","/home/haziz1/node_modules/@babel/parser/src/plugins/typescript/index.js","/home/haziz1/node_modules/@babel/parser/src/plugins/placeholders.js","/home/haziz1/node_modules/@babel/parser/src/plugins/v8intrinsic.js","/home/haziz1/node_modules/@babel/parser/src/plugin-utils.js","/home/haziz1/node_modules/@babel/parser/src/options.js","/home/haziz1/node_modules/@babel/parser/src/parser/lval.js","/home/haziz1/node_modules/@babel/parser/src/parser/expression.js","/home/haziz1/node_modules/@babel/parser/src/parser/statement.js","/home/haziz1/node_modules/@babel/parser/src/parser/index.js","/home/haziz1/node_modules/@babel/parser/src/index.js"],"sourcesContent":["// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    return this.plugins.get(plugin)?.[name];\n  }\n}\n\nexport type PluginConfig = string | [string, { [string]: any }];\n","// @flow\n\n/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number,\n  end: number,\n  comments: Array<Comment>,\n  leadingNode: Node | null,\n  trailingNode: Node | null,\n  containingNode: Node | null,\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Node, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Node, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(node: Node, comments: Array<Comment>) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Node} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Node,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaning commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterepret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","// @flow\n\nexport const ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ErrorCode = $Values<typeof ErrorCodes>;\n","// @flow\n\nimport { makeErrorTemplates, ErrorCodes } from \"./error\";\n\n/* eslint sort-keys: \"error\" */\n\n/**\n * @module parser/error-message\n */\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const ErrorMessages = makeErrorTemplates(\n  {\n    AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n    ArgumentsInClass:\n      \"'arguments' is only allowed in functions and class methods.\",\n    AsyncFunctionInSingleStatementContext:\n      \"Async functions can only be declared at the top level or inside a block.\",\n    AwaitBindingIdentifier:\n      \"Can not use 'await' as identifier inside an async function.\",\n    AwaitBindingIdentifierInStaticBlock:\n      \"Can not use 'await' as identifier inside a static block.\",\n    AwaitExpressionFormalParameter:\n      \"'await' is not allowed in async function parameters.\",\n    AwaitNotInAsyncContext:\n      \"'await' is only allowed within async functions and at the top levels of modules.\",\n    AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n    BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n    BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n    BadSetterRestParameter:\n      \"A 'set' accesor function argument must not be a rest parameter.\",\n    ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n    ConstructorClassPrivateField:\n      \"Classes may not have a private field named '#constructor'.\",\n    ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n    ConstructorIsAsync: \"Constructor can't be an async function.\",\n    ConstructorIsGenerator: \"Constructor can't be a generator.\",\n    DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n    DecoratorBeforeExport:\n      \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n    DecoratorConstructor:\n      \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n    DecoratorExportClass:\n      \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n    DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n    DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n    DeletePrivateField: \"Deleting a private field is not allowed.\",\n    DestructureNamedImport:\n      \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n    DuplicateConstructor: \"Duplicate constructor in the same class.\",\n    DuplicateDefaultExport: \"Only one default export allowed per module.\",\n    DuplicateExport:\n      \"`%0` has already been exported. Exported identifiers must be unique.\",\n    DuplicateProto: \"Redefinition of __proto__ property.\",\n    DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n    ElementAfterRest: \"Rest element must be last element.\",\n    EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n    ExportBindingIsString:\n      \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n    ExportDefaultFromAsIdentifier:\n      \"'from' is not allowed as an identifier after 'export default'.\",\n    ForInOfLoopInitializer:\n      \"'%0' loop variable declaration may not have an initializer.\",\n    ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n    ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n    GeneratorInSingleStatementContext:\n      \"Generators can only be declared at the top level or inside a block.\",\n    IllegalBreakContinue: \"Unsyntactic %0.\",\n    IllegalLanguageModeDirective:\n      \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n    IllegalReturn: \"'return' outside of function.\",\n    ImportBindingIsString:\n      'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n    ImportCallArgumentTrailingComma:\n      \"Trailing comma is disallowed inside import(...) arguments.\",\n    ImportCallArity: \"`import()` requires exactly %0.\",\n    ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n    ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n    IncompatibleRegExpUVFlags:\n      \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n    InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n    InvalidCodePoint: \"Code point out of bounds.\",\n    InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n    InvalidDecimal: \"Invalid decimal.\",\n    InvalidDigit: \"Expected number in radix %0.\",\n    InvalidEscapeSequence: \"Bad character escape sequence.\",\n    InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n    InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n    InvalidIdentifier: \"Invalid identifier %0.\",\n    InvalidLhs: \"Invalid left-hand side in %0.\",\n    InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n    InvalidNumber: \"Invalid number.\",\n    InvalidOrMissingExponent:\n      \"Floating-point numbers require a valid exponent after the 'e'.\",\n    InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n    InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n    InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n    InvalidPropertyBindingPattern: \"Binding member expression.\",\n    InvalidRecordProperty:\n      \"Only properties and spread elements are allowed in record definitions.\",\n    InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n    LabelRedeclaration: \"Label '%0' is already declared.\",\n    LetInLexicalBinding:\n      \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n    LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n    MalformedRegExpFlags: \"Invalid regular expression flag.\",\n    MissingClassName: \"A class name is required.\",\n    MissingEqInAssignment:\n      \"Only '=' operator can be used for specifying default value.\",\n    MissingSemicolon: \"Missing semicolon.\",\n    MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n    MixingCoalesceWithLogical:\n      \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n    ModuleAttributeDifferentFromType:\n      \"The only accepted module attribute is `type`.\",\n    ModuleAttributeInvalidValue:\n      \"Only string literals are allowed as module attribute values.\",\n    ModuleAttributesWithDuplicateKeys:\n      'Duplicate key \"%0\" is not allowed in module attributes.',\n    ModuleExportNameHasLoneSurrogate:\n      \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n    ModuleExportUndefined: \"Export '%0' is not defined.\",\n    MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n    NewlineAfterThrow: \"Illegal newline after throw.\",\n    NoCatchOrFinally: \"Missing catch or finally clause.\",\n    NumberIdentifier: \"Identifier directly after number.\",\n    NumericSeparatorInEscapeSequence:\n      \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n    ObsoleteAwaitStar:\n      \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n    OptionalChainingNoNew:\n      \"Constructors in/after an Optional Chain are not allowed.\",\n    OptionalChainingNoTemplate:\n      \"Tagged Template Literals are not allowed in optionalChain.\",\n    OverrideOnConstructor:\n      \"'override' modifier cannot appear on a constructor declaration.\",\n    ParamDupe: \"Argument name clash.\",\n    PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n    PatternHasMethod: \"Object pattern can't contain methods.\",\n    // This error is only used by the smart-mix proposal\n    PipeBodyIsTighter:\n      \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n    PipeTopicRequiresHackPipes:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n    PipeTopicUnbound:\n      \"Topic reference is unbound; it must be inside a pipe body.\",\n    PipeTopicUnconfiguredToken:\n      'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n    PipeTopicUnused:\n      \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n    PipeUnparenthesizedBody:\n      \"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\",\n\n    // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n    // are retained for backwards compatibility\n    // with the deprecated smart-mix pipe operator proposal plugin.\n    // They are subject to removal in a future major version.\n    PipelineBodyNoArrow:\n      'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n    PipelineBodySequenceExpression:\n      \"Pipeline body may not be a comma-separated sequence expression.\",\n    PipelineHeadSequenceExpression:\n      \"Pipeline head should not be a comma-separated sequence expression.\",\n    PipelineTopicUnused:\n      \"Pipeline is in topic style but does not use topic reference.\",\n    PrimaryTopicNotAllowed:\n      \"Topic reference was used in a lexical context without topic binding.\",\n    PrimaryTopicRequiresSmartPipeline:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n\n    PrivateInExpectedIn:\n      \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n    PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n    RecordExpressionBarIncorrectEndSyntaxType:\n      \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionBarIncorrectStartSyntaxType:\n      \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionHashIncorrectStartSyntaxType:\n      \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n    RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n    SloppyFunction:\n      \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n    StaticPrototype: \"Classes may not have static property named prototype.\",\n    StrictDelete: \"Deleting local variable in strict mode.\",\n    StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n    StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n    StrictFunction:\n      \"In strict mode code, functions can only be declared at top level or inside a block.\",\n    StrictNumericEscape:\n      \"The only valid numeric escape in strict mode is '\\\\0'.\",\n    StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n    StrictWith: \"'with' in strict mode.\",\n    SuperNotAllowed:\n      \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n    SuperPrivateField: \"Private fields can't be accessed on super.\",\n    TrailingDecorator: \"Decorators must be attached to a class element.\",\n    TupleExpressionBarIncorrectEndSyntaxType:\n      \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionBarIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionHashIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n    UnexpectedAwaitAfterPipelineBody:\n      'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n    UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n    UnexpectedImportExport:\n      \"'import' and 'export' may only appear at the top level.\",\n    UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n    UnexpectedLeadingDecorator:\n      \"Leading decorators must be attached to a class declaration.\",\n    UnexpectedLexicalDeclaration:\n      \"Lexical declaration cannot appear in a single-statement context.\",\n    UnexpectedNewTarget:\n      \"`new.target` can only be used in functions or class properties.\",\n    UnexpectedNumericSeparator:\n      \"A numeric separator is only allowed between two digits.\",\n    UnexpectedPrivateField: \"Unexpected private name.\",\n    UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n    UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n    UnexpectedToken: \"Unexpected token '%0'.\",\n    UnexpectedTokenUnaryExponentiation:\n      \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n    UnsupportedBind: \"Binding should be performed on object property.\",\n    UnsupportedDecoratorExport:\n      \"A decorated export must export a class declaration.\",\n    UnsupportedDefaultExport:\n      \"Only expressions, functions or classes are allowed as the `default` export.\",\n    UnsupportedImport:\n      \"`import` can only be used in `import()` or `import.meta`.\",\n    UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n    UnsupportedParameterDecorator:\n      \"Decorators cannot be used to decorate parameters.\",\n    UnsupportedPropertyDecorator:\n      \"Decorators cannot be used to decorate object literal properties.\",\n    UnsupportedSuper:\n      \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n    UnterminatedComment: \"Unterminated comment.\",\n    UnterminatedRegExp: \"Unterminated regular expression.\",\n    UnterminatedString: \"Unterminated string constant.\",\n    UnterminatedTemplate: \"Unterminated template.\",\n    VarRedeclaration: \"Identifier '%0' has already been declared.\",\n    YieldBindingIdentifier:\n      \"Can not use 'yield' as identifier inside a generator.\",\n    YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n    ZeroDigitNumericSeparator:\n      \"Numeric separator can not be used after leading 0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport const SourceTypeModuleErrorMessages = makeErrorTemplates(\n  {\n    ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n    ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  },\n  /* code */ ErrorCodes.SourceTypeModuleError,\n);\n","// @flow\n/* eslint sort-keys: \"error\" */\nimport { type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\nimport { type ErrorCode, ErrorCodes } from \"./error-codes\";\nimport { type Node } from \"../types\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n  reasonCode?: String,\n};\nexport type ParsingError = SyntaxError & ErrorContext;\n\nexport type ErrorTemplate = {\n  code: ErrorCode,\n  template: string,\n  reasonCode: string,\n};\nexport type ErrorTemplates = {\n  [key: string]: ErrorTemplate,\n};\n\ntype Origin = {| node: Node |} | {| at: Position |};\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"placeholders\"\n  | typeof undefined;\n\nfunction keepReasonCodeCompat(reasonCode: string, syntaxPlugin: SyntaxPlugin) {\n  if (!process.env.BABEL_8_BREAKING) {\n    // For consistency in TypeScript and Flow error codes\n    if (syntaxPlugin === \"flow\" && reasonCode === \"PatternIsOptional\") {\n      return \"OptionalBindingPattern\";\n    }\n  }\n  return reasonCode;\n}\n\nexport function makeErrorTemplates(\n  messages: {\n    [key: string]: string,\n  },\n  code: ErrorCode,\n  syntaxPlugin?: SyntaxPlugin,\n): ErrorTemplates {\n  const templates: ErrorTemplates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),\n      template: messages[reasonCode],\n    });\n  });\n  return Object.freeze(templates);\n}\n\nexport { ErrorCodes };\nexport {\n  ErrorMessages as Errors,\n  SourceTypeModuleErrorMessages as SourceTypeModuleErrors,\n} from \"./error-message\";\n\nexport type raiseFunction = (ErrorTemplate, Origin, ...any) => void;\nexport type ErrorData = {| message: ErrorTemplate, loc: Position |};\n\nexport default class ParserError extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  raise(\n    { code, reasonCode, template }: ErrorTemplate,\n    origin: Origin,\n    ...params: any\n  ): Error | empty {\n    return this.raiseWithData(\n      origin.node ? origin.node.loc.start : origin.at,\n      { code, reasonCode },\n      template,\n      ...params,\n    );\n  }\n\n  /**\n   * Raise a parsing error on given position pos. If errorRecovery is true,\n   * it will first search current errors and overwrite the error thrown on the exact\n   * position before with the new error message. If errorRecovery is false, it\n   * fallbacks to `raise`.\n   *\n   * @param {number} pos\n   * @param {string} errorTemplate\n   * @param {...any} params\n   * @returns {(Error | empty)}\n   * @memberof ParserError\n   */\n  raiseOverwrite(\n    loc: Position,\n    { code, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    const pos = loc.index;\n    const message =\n      template.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n        if (error.pos === pos) {\n          return Object.assign(error, { message });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n    return this._raise({ code, loc, pos }, message);\n  }\n\n  raiseWithData(\n    loc: Position,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const pos = loc.index;\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parser/error\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object, key) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    parseRegExpLiteral({ pattern, flags }): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T: N.Node>(value: any) {\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.loc.end);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n      const node = super.parseLiteral<T>(value, type);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        return node;\n      }\n\n      return super.toAssignable(node, isLHS);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, ...args) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { node: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { node: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, ...args);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          ((node: N.Node): N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc?: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// @flow\n\n// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext,\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX openning tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","// @flow\nimport { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\n// Internally the tokenizer stores token as a number\nexport opaque type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext: ?(context: Array<TokContext>) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport const tt: { [name: string]: TokenType } = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\", { beforeExpr }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","// @flow\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport * as N from \"../types\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  declare raise: raiseFunction;\n  declare inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(Errors.VarRedeclaration, { at: loc }, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { ErrorData, ParsingError } from \"../parser/error\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParsingError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, ErrorData> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number,\n  value: any,\n  type: TokenType,\n  start: number,\n  end: number,\n  /* Used only in readToken_mult_modulo */\n  inType: boolean,\n};\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport ParserErrors, { Errors, type ErrorTemplate } from \"../parser/error\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState } from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends ParserErrors {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +hasPrecedingLineBreak: () => boolean;\n  +unexpected: (loc?: ?Position, type?: TokenType) => empty;\n  +expectPlugin: (name: string, loc?: Position) => true;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simpified tokenizer state structure\n    // $FlowIgnore\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(({ message, loc }) =>\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(message, { at: loc }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment(): N.CommentBlock | void {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | void {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    // $FlowIgnore\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      { at: this.state.curPosition() },\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition(),\n          });\n        } else if (\n          forbiddenSiblings.indexOf(prev) > -1 ||\n          forbiddenSiblings.indexOf(next) > -1 ||\n          Number.isNaN(next)\n        ) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition(),\n          });\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(Errors.NumericSeparatorInEscapeSequence, {\n            at: this.state.curPosition(),\n          });\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(\n            Errors.InvalidDigit,\n            { at: this.state.curPosition() },\n            radix,\n          );\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        { at: createPositionWithColumnOffset(startLoc, 2) },\n        radix,\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(Errors.InvalidCodePoint, { at: this.state.curPosition() });\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads tempalte continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    ++this.state.pos; // eat '`' or `}`\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedTemplate, {\n          at: createPositionWithColumnOffset(this.state.startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === charCodes.graveAccent) {\n        ++this.state.pos; // eat '`'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateTail, containsInvalid ? null : out);\n        return;\n      }\n      if (\n        ch === charCodes.dollarSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.leftCurlyBrace\n      ) {\n        this.state.pos += 2; // eat '${'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateNonTail, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(message: ErrorTemplate, loc: Position) {\n    if (this.state.strict && !this.state.strictErrors.has(loc.index)) {\n      this.raise(message, { at: loc });\n    } else {\n      this.state.strictErrors.set(loc.index, { loc, message });\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(\n            Errors.StrictNumericEscape,\n            // We immediately follow a \"\\\\\", and we're an 8 or a 9, so we must\n            // be on the same line.\n            createPositionWithColumnOffset(this.state.curPosition(), -1),\n          );\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          // We immediately follow a \"\\\\\", and we're something between 0 and 7,\n          // so we must be on the same line.\n          const codePos = createPositionWithColumnOffset(\n            this.state.curPosition(),\n            -1,\n          );\n          const match = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(Errors.StrictNumericEscape, codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codeLoc = this.state.curPosition();\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(Errors.InvalidEscapeSequence, { at: codeLoc });\n      } else {\n        this.state.pos = codeLoc.index - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode: number | void): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode: number | void): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(\n        Errors.InvalidEscapedReservedWord,\n        { at: this.state.startLoc },\n        tokenLabelName(type),\n      );\n    }\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line no-unused-vars\n  updateContext(prevType: TokenType): void {}\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  declare raise: raiseFunction;\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.raise(Errors.InvalidPrivateFieldResolution, { at: loc }, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(Errors.PrivateNameRedeclaration, { at: loc }, name);\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.raise(Errors.InvalidPrivateFieldResolution, { at: loc }, name);\n    }\n  }\n}\n","// @flow\n\nimport type { ErrorData, ErrorTemplate, raiseFunction } from \"../parser/error\";\nimport { Position } from \"./location\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser/error-message) will be recorded in\nsome expression scopes and thrown later when we know what the ambigous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  errors: Map</* pos */ number, ErrorData> = new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(message: ErrorTemplate, loc: Position) {\n    this.errors.set(loc.index, { message, loc });\n  }\n  clearDeclarationError(loc: Position) {\n    this.errors.delete(loc.index);\n  }\n  iterateErrors(iterator: (data: ErrorData) => void) {\n    this.errors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n  declare raise: raiseFunction;\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(\n    loc: Position,\n    template: ErrorTemplate,\n  ): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(template, loc);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    this.raise(template, { at: loc });\n  }\n\n  /**\n   * Record parenthesized identifier errors\n   *\n   * A parenthesized identifier in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordParenthesizedIdentifierError(\n    template: ErrorTemplate,\n    loc: Position,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(template, { at: loc });\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(template, loc);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError(\n    template: ErrorTemplate,\n    loc: Position,\n  ): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(template, loc);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors(({ message, loc }) => {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(message, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(loc);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\nimport { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport { Errors, type ErrorTemplate, ErrorCodes } from \"./error\";\nimport type { ParsingError } from \"./error\";\nimport type { PluginConfig } from \"./base\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(\n    node: Node,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(token: TokenType, template?: ErrorTemplate): void {\n    if (!this.eatContextual(token)) {\n      if (template != null) {\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        throw this.raise(template, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: ?Position): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEndLoc.index) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(\n        {\n          code: ErrorCodes.SyntaxError,\n          reasonCode: \"UnexpectedSpace\",\n          template: message,\n        },\n        { at: this.state.lastTokEndLoc },\n        /* eslint-enable @babel/development-internal/dry-error-messages */\n      );\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(loc?: ?Position, type?: ?TokenType): empty {\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    throw this.raise(\n      {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template:\n          type != null\n            ? `Unexpected token, expected \"${tokenLabelName(type)}\"`\n            : \"Unexpected token\",\n      },\n      { at: loc != null ? loc : this.state.startLoc },\n    );\n    /* eslint-enable @babel/development-internal/dry-error-messages */\n  }\n\n  getPluginNamesFromConfigs(pluginConfigs: Array<PluginConfig>): Array<string> {\n    return pluginConfigs.map(c => {\n      if (typeof c === \"string\") {\n        return c;\n      } else {\n        return c[0];\n      }\n    });\n  }\n\n  expectPlugin(pluginConfig: PluginConfig, loc?: ?Position): true {\n    if (!this.hasPlugin(pluginConfig)) {\n      throw this.raiseWithData(\n        loc != null ? loc : this.state.startLoc,\n        { missingPlugin: this.getPluginNamesFromConfigs([pluginConfig]) },\n        `This experimental syntax requires enabling the parser plugin: ${JSON.stringify(\n          pluginConfig,\n        )}.`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(pluginConfigs: Array<PluginConfig>): void {\n    if (!pluginConfigs.some(c => this.hasPlugin(c))) {\n      throw this.raiseWithData(\n        this.state.startLoc,\n        { missingPlugin: this.getPluginNamesFromConfigs(pluginConfigs) },\n        `This experimental syntax requires enabling one of the following parser plugin(s): ${pluginConfigs\n          .map(c => JSON.stringify(c))\n          .join(\", \")}.`,\n      );\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParsingError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: ParsingError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: ?Position = null;\n  doubleProtoLoc: ?Position = null;\n  privateKeyLoc: ?Position = null;\n  optionalParametersLoc: ?Position = null;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: { [key: string]: any };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // $FlowIgnore\n  NodePrototype.__clone = function (): Node {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  type BindingTypes,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = makeErrorTemplates(\n  {\n    AmbiguousConditionalArrow:\n      \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n    AmbiguousDeclareModuleKind:\n      \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n    AssignReservedType: \"Cannot overwrite reserved type %0.\",\n    DeclareClassElement:\n      \"The `declare` modifier can only appear on class fields.\",\n    DeclareClassFieldInitializer:\n      \"Initializers are not allowed in fields with the `declare` modifier.\",\n    DuplicateDeclareModuleExports:\n      \"Duplicate `declare module.exports` statement.\",\n    EnumBooleanMemberNotInitialized:\n      \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n    EnumDuplicateMemberName:\n      \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n    EnumInconsistentMemberValues:\n      \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n    EnumInvalidExplicitType:\n      \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidExplicitTypeUnknownSupplied:\n      \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidMemberInitializerPrimaryType:\n      \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n    EnumInvalidMemberInitializerSymbolType:\n      \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n    EnumInvalidMemberInitializerUnknownType:\n      \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n    EnumInvalidMemberName:\n      \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n    EnumNumberMemberNotInitialized:\n      \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n    EnumStringMemberInconsistentlyInitailized:\n      \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n    GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n    ImportTypeShorthandOnlyInPureImport:\n      \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n    InexactInsideExact:\n      \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n    InexactInsideNonObject:\n      \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n    InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n    InvalidNonTypeImportInDeclareModule:\n      \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n    MissingTypeParamDefault:\n      \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n    NestedDeclareModule:\n      \"`declare module` cannot be used inside another `declare module`.\",\n    NestedFlowComment:\n      \"Cannot have a flow comment inside another flow comment.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n    SpreadVariance: \"Spread properties cannot have variance.\",\n    ThisParamAnnotationRequired:\n      \"A type annotation is required for the `this` parameter.\",\n    ThisParamBannedInConstructor:\n      \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n    ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n    ThisParamMustBeFirst:\n      \"The `this` parameter must be the first function parameter.\",\n    ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n    TypeBeforeInitializer:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeCastInPattern:\n      \"The type cast expression is expected to be wrapped with parenthesis.\",\n    UnexpectedExplicitInexactInObject:\n      \"Explicit inexact syntax must appear at the end of an inexact object.\",\n    UnexpectedReservedType: \"Unexpected reserved type %0.\",\n    UnexpectedReservedUnderscore:\n      \"`_` is only allowed as a type argument to call or new.\",\n    UnexpectedSpaceBetweenModuloChecks:\n      \"Spaces between `%` and `checks` are not allowed here.\",\n    UnexpectedSpreadType:\n      \"Spread operator cannot appear in class or interface definitions.\",\n    UnexpectedSubtractionOperand:\n      'Unexpected token, expected \"number\" or \"bigint\".',\n    UnexpectedTokenAfterTypeParameter:\n      \"Expected an arrow function after this type parameter declaration.\",\n    UnexpectedTypeParameterBeforeAsyncArrowFunction:\n      \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n    UnsupportedDeclareExportKind:\n      \"`declare export %0` is not supported. Use `%1` instead.\",\n    UnsupportedStatementInDeclareModule:\n      \"Only declares and type imports are allowed inside declare module.\",\n    UnterminatedFlowComment: \"Unterminated flow-comment.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"flow\",\n);\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", loc: Position, value: N.Node |}\n  | {| type: \"string\", loc: Position, value: N.Node |}\n  | {| type: \"boolean\", loc: Position, value: N.Node |}\n  | {| type: \"invalid\", loc: Position |}\n  | {| type: \"none\", loc: Position |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              node: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              node: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              node: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            { at: this.state.startLoc },\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        { at: startLoc },\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: ?Position = null;\n        let inexactStartLoc: ?Position = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStartLoc: ?Position,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { node: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { node: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              node: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { node: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { node: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { node: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode<N.BooleanLiteralTypeAnnotation>(\n            node,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startPos,\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            node: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(\n          Errors.InvalidIdentifier,\n          { at: this.state.curPosition() },\n          fullWord,\n        );\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc?: ?Position,\n      isLHS: boolean,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            node: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      ...args:\n        | [string, BindingTypes | void]\n        | [\n            string,\n            BindingTypes | void,\n            ?Set<string>,\n            boolean | void,\n            boolean | void,\n          ]\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, ...args);\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { node: method });\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { node: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { node: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { node: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.loc.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { node: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { node: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { node: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { node: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          node: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line no-unused-vars\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(\n              Errors.ImportBindingIsString,\n              { node: specifier },\n              firstIdent.value,\n            );\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          node: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { node: typeParameters },\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          node: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { node: node.params[i] });\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n        if (end === -1) {\n          throw this.raise(Errors.UnterminatedComment, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos = end + 2 + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        { at: loc },\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      loc: Position,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        { at: loc },\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      return this.raise(\n        explicitType === \"boolean\" ||\n          explicitType === \"number\" ||\n          explicitType === \"string\"\n          ? FlowErrors.EnumInvalidMemberInitializerPrimaryType\n          : explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerUnknownType,\n        { at: loc },\n        enumName,\n        memberName,\n        explicitType,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        FlowErrors.EnumNumberMemberNotInitialized,\n        { at: loc },\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        { node },\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(\n            FlowErrors.EnumInvalidMemberName,\n            { node: id },\n            memberName,\n            // suggestion\n            memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          );\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(\n            FlowErrors.EnumDuplicateMemberName,\n            { node: id },\n            memberName,\n            enumName,\n          );\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(tt._of)) {\n        if (!tokenIsIdentifier(this.state.type)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(\n              FlowErrors.EnumInconsistentMemberValues,\n              { at: nameLoc },\n              enumName,\n            );\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = makeErrorTemplates(\n  {\n    AttributeIsEmpty:\n      \"JSX attributes must only be assigned a non-empty expression.\",\n    MissingClosingTagElement:\n      \"Expected corresponding JSX closing tag for <%0>.\",\n    MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n    UnexpectedSequenceExpression:\n      \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n    UnsupportedJsxValue:\n      \"JSX value should be either an expression or a quoted JSX text.\",\n    UnterminatedJsxContent: \"Unterminated JSX contents.\",\n    UnwrappedAdjacentJSXElements:\n      \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"jsx\",\n);\n/* eslint-disable sort-keys */\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              const htmlEntity =\n                ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\";\n              const char = this.input[this.state.pos];\n              this.raise(\n                {\n                  code: ErrorCodes.SyntaxError,\n                  reasonCode: \"UnexpectedToken\",\n                  template: `Unexpected token \\`${char}\\`. Did you mean \\`${htmlEntity}\\` or \\`{'${char}'}\\`?`,\n                },\n                { at: this.state.curPosition() },\n              );\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEndLoc.index,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_oTag);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              node: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            node: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            JsxErrors.MissingClosingTagElement,\n            // $FlowIgnore\n            { node: closingElement },\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              JsxErrors.MissingClosingTagElement,\n              // $FlowIgnore\n              { node: closingElement },\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport {\n  Errors,\n  makeErrorTemplates,\n  type ErrorTemplate,\n  ErrorCodes,\n} from \"../../parser/error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = makeErrorTemplates(\n  {\n    AbstractMethodHasImplementation:\n      \"Method '%0' cannot have an implementation because it is marked abstract.\",\n    AbstractPropertyHasInitializer:\n      \"Property '%0' cannot have an initializer because it is marked abstract.\",\n    AccesorCannotDeclareThisParameter:\n      \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n    AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n    ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n    ClassMethodHasReadonly:\n      \"Class methods cannot have the 'readonly' modifier.\",\n    ConstructorHasTypeParameters:\n      \"Type parameters cannot appear on a constructor declaration.\",\n    DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n    DeclareClassFieldHasInitializer:\n      \"Initializers are not allowed in ambient contexts.\",\n    DeclareFunctionHasImplementation:\n      \"An implementation cannot be declared in ambient contexts.\",\n    DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n    DuplicateModifier: \"Duplicate modifier: '%0'.\",\n    EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n    EmptyTypeArguments: \"Type argument list cannot be empty.\",\n    EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n    ExpectedAmbientAfterExportDeclare:\n      \"'export declare' must be followed by an ambient declaration.\",\n    ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n    IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n    IndexSignatureHasAbstract:\n      \"Index signatures cannot have the 'abstract' modifier.\",\n    IndexSignatureHasAccessibility:\n      \"Index signatures cannot have an accessibility modifier ('%0').\",\n    IndexSignatureHasDeclare:\n      \"Index signatures cannot have the 'declare' modifier.\",\n    IndexSignatureHasOverride:\n      \"'override' modifier cannot appear on an index signature.\",\n    IndexSignatureHasStatic:\n      \"Index signatures cannot have the 'static' modifier.\",\n    InvalidModifierOnTypeMember:\n      \"'%0' modifier cannot appear on a type member.\",\n    InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n    InvalidTupleMemberLabel:\n      \"Tuple members must be labeled with a simple identifier.\",\n    MissingInterfaceName:\n      \"'interface' declarations must be followed by an identifier.\",\n    MixedLabeledAndUnlabeledElements:\n      \"Tuple members must all have names or all not have names.\",\n    NonAbstractClassHasAbstractMethod:\n      \"Abstract methods can only appear within an abstract class.\",\n    NonClassMethodPropertyHasAbstractModifer:\n      \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n    OptionalTypeBeforeRequired:\n      \"A required element cannot follow an optional element.\",\n    OverrideNotInSubClass:\n      \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    PrivateElementHasAbstract:\n      \"Private elements cannot have the 'abstract' modifier.\",\n    PrivateElementHasAccessibility:\n      \"Private elements cannot have an accessibility modifier ('%0').\",\n    ReadonlyForMethodSignature:\n      \"'readonly' modifier can only appear on a property declaration or index signature.\",\n    ReservedArrowTypeParam:\n      \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n    ReservedTypeAssertion:\n      \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n    SetAccesorCannotHaveOptionalParameter:\n      \"A 'set' accessor cannot have an optional parameter.\",\n    SetAccesorCannotHaveRestParameter:\n      \"A 'set' accessor cannot have rest parameter.\",\n    SetAccesorCannotHaveReturnType:\n      \"A 'set' accessor cannot have a return type annotation.\",\n    StaticBlockCannotHaveModifier:\n      \"Static class blocks cannot have any modifier.\",\n    TypeAnnotationAfterAssign:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeImportCannotSpecifyDefaultAndNamed:\n      \"A type-only import can specify a default import or named bindings, but not both.\",\n    TypeModifierIsUsedInTypeExports:\n      \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n    TypeModifierIsUsedInTypeImports:\n      \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n    UnexpectedParameterModifier:\n      \"A parameter property is only allowed in a constructor implementation.\",\n    UnexpectedReadonly:\n      \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n    UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n    UnexpectedTypeCastInParameter:\n      \"Unexpected type cast in parameter position.\",\n    UnsupportedImportTypeArgument:\n      \"Argument in a type import must be a string literal.\",\n    UnsupportedParameterPropertyKind:\n      \"A parameter property may not be declared using a binding pattern.\",\n    UnsupportedSignatureParameterKind:\n      \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"typescript\",\n);\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): ?T {\n      if (!tokenIsIdentifier(this.state.type)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers(\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      errorTemplate?: ErrorTemplate,\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): void {\n      const enforceOrder = (loc, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(\n            TSErrors.InvalidModifiersOrder,\n            { at: loc },\n            before,\n            after,\n          );\n        }\n      };\n      const incompatible = (loc, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, { at: loc }, mod1, mod2);\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc }, modifier);\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          // $FlowIgnore\n          this.raise(errorTemplate, { at: startLoc }, modifier);\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): ?(T[]) {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              TSErrors.UnsupportedSignatureParameterKind,\n              { node: pattern },\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              node: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        node,\n        [\"readonly\"],\n        [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n        TSErrors.InvalidModifierOnTypeMember,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            node: elementNode,\n          });\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            node: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { node: type });\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node: N.TsKeywordType = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            (node: N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node: N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          { at: this.state.lastTokStartLoc },\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(\n          TSErrors.EmptyHeritageClauseType,\n          { at: originalStartLoc },\n          descriptor,\n        );\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkLVal(\n          node.id,\n          \"typescript interface declaration\",\n          BIND_TS_INTERFACE,\n        );\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsInType(() => {\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        \"typescript enum declaration\",\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          \"module or namespace declaration\",\n          BIND_TS_NAMESPACE,\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          node: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        switch (starttype) {\n          case tt._function:\n            nany.declare = true;\n            return this.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* declarationPosition */ true,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to now how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._const:\n            if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n              // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n              this.expect(tt._const);\n              this.expectContextual(tt._enum);\n              return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n            }\n          // falls through\n          case tt._var:\n            kind = kind || this.state.value;\n            return this.parseVarStatement(nany, kind);\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          default: {\n            if (tokenIsIdentifier(starttype)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n              );\n            }\n          }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"enum\":\n          if (next || tokenIsIdentifier(this.state.type)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified = {};\n        this.tsParseModifiers(modified, [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"override\",\n          \"readonly\",\n        ]);\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { node: pp });\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { node });\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            node: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n          if (typeArguments) {\n            if (isOptionalCall && !this.match(tt.parenL)) {\n              missingParenErrorLoc = this.state.curPosition();\n              this.unexpected();\n            }\n\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n\n              // Handles invalid case: `f<T>(a:b)`\n              this.tsCheckForInvalidTypeCasts(node.arguments);\n\n              node.typeParameters = typeArguments;\n              if (state.optionalChainMember) {\n                // $FlowIgnore\n                node.optional = isOptionalCall;\n              }\n\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (tokenIsTemplate(this.state.type)) {\n              const result = this.parseTaggedTemplateExpression(\n                base,\n                startPos,\n                startLoc,\n                state,\n              );\n              result.typeParameters = typeArguments;\n              return result;\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      // tsTryParseAndCatch is expensive, so avoid if not necessary.\n      // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n      // Also handles `new C<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArgumentsInExpression();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(tt._as)\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: Position, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          node: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const interfaceNode = this.startNode();\n        this.next();\n        const result = this.tsParseInterfaceDeclaration(interfaceNode);\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt._enum) {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.next(); // eat 'const'\n          this.expectContextual(tt._enum);\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ];\n      this.tsParseModifiers(\n        member,\n        modifiers,\n        /* disallowedModifiers */ undefined,\n        /* errorTemplate */ undefined,\n        /* stopOnStartOfClassStaticBlock */ true,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { node: member });\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            TSErrors.IndexSignatureHasAccessibility,\n            { node: member },\n            (member: any).accessibility,\n          );\n        }\n        if ((member: any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { node: member });\n        }\n        if ((member: any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { node: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          node: member,\n        });\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { node: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { node: methodOrProp });\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { node: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      let declaration: ?N.Declaration;\n\n      if (tokenIsIdentifier(this.state.type)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n      if (\n        declaration &&\n        (declaration.type === \"TSInterfaceDeclaration\" ||\n          declaration.type === \"TSTypeAliasDeclaration\" ||\n          isDeclare)\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          { at: this.state.startLoc },\n          key.type === \"Identifier\" && !node.computed\n            ? key.name\n            : `[${this.input.slice(key.start, key.end)}]`,\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { node });\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          TSErrors.PrivateElementHasAccessibility,\n          { node },\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          node: typeParameters,\n        });\n      }\n\n      // $FlowIgnore\n      if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { node: method }, method.kind);\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: ?N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { node: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node), isLHS);\n        case \"TSParameterProperty\":\n          return super.toAssignable(node, isLHS);\n        case \"ParenthesizedExpression\":\n          return this.toAssignableParenthesizedExpression(node, isLHS);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean) {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      contextDescription: string,\n      ...args:\n        | [BindingTypes | void]\n        | [BindingTypes | void, ?Set<string>, boolean | void, boolean | void]\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(expr.parameter, \"parameter property\", ...args);\n          return;\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (\n            /*bindingType*/ !args[0] &&\n            contextDescription !== \"parenthesized expression\" &&\n            !expr.extra?.parenthesized\n          ) {\n            this.raise(Errors.InvalidLhs, { node: expr }, contextDescription);\n            break;\n          }\n          this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n          return;\n        case \"TSNonNullExpression\":\n          this.checkLVal(expr.expression, contextDescription, ...args);\n          return;\n        default:\n          super.checkLVal(expr, contextDescription, ...args);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          node: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(TSErrors.UnexpectedTypeCastInParameter, {\n                node: expr,\n              });\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | typeof undefined {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            node,\n          });\n          this.next();\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(\n            TSErrors.AbstractMethodHasImplementation,\n            { node: method },\n            key.type === \"Identifier\" && !method.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n          );\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: any,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = this.parseIdentifier();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = this.parseIdentifier();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        leftOfAs = this.parseIdentifier();\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkLVal(node[rightOfAsKey], \"import specifier\", BIND_LEXICAL);\n      }\n    }\n  };\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { makeErrorTemplates, ErrorCodes } from \"../parser/error\";\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = makeErrorTemplates(\n  {\n    ClassNameIsRequired: \"A class name is required.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"placeholders\",\n);\n/* eslint-disable sort-keys */\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(tt._let)) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\nimport type { PluginConfig } from \"./parser/base\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = $ReadOnlyArray<PluginConfig>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVerionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> =\n  Object.keys(mixinPlugins);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startColumn: number,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n  attachComment: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: ObjectOrClassMember, */\n  /*:: ClassMember, */\n  /*:: ObjectMember, */\n  /*:: TsNamedTypeElementBase, */\n  /*:: Identifier, */\n  /*:: PrivateName, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./error\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  +parseObjPropValue: (\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => void;\n  +parsePropertyName: (\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ) => Expression | Identifier;\n  +parsePrivateName: () => PrivateName\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression. If isLHS is `true`, the following cases are allowed:\n                                    `[(a)] = [0]`, `[(a.b)] = [0]`\n\n   * @returns {Node} The converted assignable pattern\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordParenthesizedIdentifierError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(\n            Errors.InvalidParenthesizedAssignment,\n            node.loc.start,\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg, isLHS);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { node: prop.key },\n      );\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raise(Errors.RestTrailingComma, { node: prop });\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc?: ?Position,\n    isLHS: boolean,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n        if (elt.type === \"RestElement\") {\n          this.raise(Errors.RestTrailingComma, { node: elt });\n        }\n      }\n    }\n    return exprList;\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(prop: RestElement): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(): ObjectMember | RestElement {\n    const prop = this.startNode();\n    const { type, start: startPos, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n\n    return prop;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  /**\n   * Verify that if a node is an lval - something that can be assigned to.\n   *\n   * @param {Expression} expr The given node\n   * @param {string} contextDescription The auxiliary context information printed when error is thrown\n   * @param {BindingTypes} [bindingType=BIND_NONE] The desired binding type. If the given node is an identifier and `bindingType` is not\n                                                   BIND_NONE, `checkLVal` will register binding to the parser scope\n                                                   See also src/util/scopeflags.js\n   * @param {?Set<string>} checkClashes An optional string set to check if an identifier name is included. `checkLVal` will add checked\n                                        identifier name to `checkClashes` It is used in tracking duplicates in function parameter lists. If\n                                        it is nullish, `checkLVal` will skip duplicate checks\n   * @param {boolean} [disallowLetBinding] Whether an identifier named \"let\" should be disallowed\n   * @param {boolean} [strictModeChanged=false] Whether an identifier has been parsed in a sloppy context but should be reinterpreted as\n                                                strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @memberof LValParser\n   */\n  checkLVal(\n    expr: Expression,\n    contextDescription: string,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?Set<string>,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\": {\n        const { name } = expr;\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(name, this.inModule)\n            : isStrictBindOnlyReservedWord(name))\n        ) {\n          this.raise(\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            { node: expr },\n            name,\n          );\n        }\n\n        if (checkClashes) {\n          if (checkClashes.has(name)) {\n            this.raise(Errors.ParamDupe, { node: expr });\n          } else {\n            checkClashes.add(name);\n          }\n        }\n        if (disallowLetBinding && name === \"let\") {\n          this.raise(Errors.LetInLexicalBinding, { node: expr });\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(name, bindingType, expr.loc.start);\n        }\n        break;\n      }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(Errors.InvalidPropertyBindingPattern, {\n            node: expr,\n          });\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (this.isObjectMethod(prop)) continue;\n\n          this.checkLVal(\n            prop,\n            \"object destructuring pattern\",\n            bindingType,\n            checkClashes,\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              \"array destructuring pattern\",\n              bindingType,\n              checkClashes,\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          \"assignment pattern\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          \"rest element\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          \"parenthesized expression\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      default: {\n        this.raise(\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          { node: expr },\n          contextDescription,\n        );\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(Errors.InvalidRestAssignmentPattern, {\n        node: node.argument,\n      });\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport type { ParsingError } from \"./error\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier } from \"./node\";\n\n/*::\nimport type { SourceType } from \"../options\";\ndeclare var invariant;\n*/\n\nconst invalidHackPipeBodies = new Map([\n  [\"ArrowFunctionExpression\", \"arrow function\"],\n  [\"AssignmentExpression\", \"assignment\"],\n  [\"ConditionalExpression\", \"conditional\"],\n  [\"YieldExpression\", \"yield\"],\n]);\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: ?boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { node: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { node: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParsingError,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left, /* isLHS */ true);\n\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startPos\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startPos\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startPos\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line no-unused-vars\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, { node: left }, value);\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(\n                  Errors.PipeBodyIsTighter,\n                  { at: this.state.startLoc },\n                  this.state.value,\n                );\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (invalidHackPipeBodies.has(body.type) && !body.extra?.parenthesized) {\n      this.raise(\n        Errors.PipeUnparenthesizedBody,\n        { at: startLoc },\n        invalidHackPipeBodies.get(body.type),\n      );\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        node: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startLoc, Errors.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    this.finishCallExpression(node, optionalChainMember);\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(\n          Errors.ImportCallArity,\n          { node },\n          this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n            ? \"one or two arguments\"\n            : \"one argument\",\n        );\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { node: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    let node;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { node: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(\n          Errors.PrivateInExpectedIn,\n          { at: this.state.startLoc },\n          this.state.value,\n        );\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: N.Node,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(\n        Errors.PipeTopicUnconfiguredToken,\n        { at: startLoc },\n        tokenLabelName(tokenType),\n      );\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(node: N.Node): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(node: N.Node, isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode();\n    const id = this.startNodeAt(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n        this.state.start + 1,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        Errors.UnsupportedMetaProperty,\n        { node: node.property },\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(SourceTypeModuleErrors.ImportMetaOutsideModule, {\n          node: id,\n        });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T: N.Node>(\n    value: any,\n    type: $ElementType<T, \"type\">,\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: { value: any, pattern: string, flags: string }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode<N.BooleanLiteral>(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode<N.NullLiteral>(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n\n      this.takeSurroundingComments(\n        val,\n        startPos,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  // eslint-disable-next-line no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { node: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.Expression): N.NewExpression {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { node: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(\n      elemStart,\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: explain\n          at: createPositionWithColumnOffset(startLoc, 2),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      elem,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return elem;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { node: prop });\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(\n            Errors.AccessorIsGenerator,\n            { at: this.state.curPosition() },\n            keyName,\n          );\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { node: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { node: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop: $FlowFixMe).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaLoc: ?Position,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaLoc: ?Position,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaLoc, false);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorOrigin =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? { at: node.key.loc.end }\n                : { node };\n\n            this.raise(Errors.IllegalLanguageModeDirective, errorOrigin);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              \"function name\",\n              BIND_OUTSIDE,\n              undefined,\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = new Set();\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        \"function parameter list\",\n        BIND_VAR,\n        allowDuplicates ? null : checkClashes,\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(\n          Errors.UnexpectedToken,\n          { at: this.state.curPosition() },\n          \",\",\n        );\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(\n        Errors.AwaitBindingIdentifier,\n        startLoc,\n      );\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, { at: startLoc }, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, { at: startLoc }, word);\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      node.loc.start,\n      Errors.AwaitExpressionFormalParameter,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      node.loc.start,\n      Errors.YieldInParameter,\n    );\n\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line no-unused-vars\n    prop: N.ObjectOrClassMember | N.ClassMember,\n  ): void {}\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier } from \"./node\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // $FlowIgnore: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name, loc] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at: loc }, name);\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = (stmt: any);\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(SourceTypeModuleErrors.ImportOutsideModule, { node });\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(\n        Errors.IllegalBreakContinue,\n        { node },\n        isBreak ? \"break\" : \"continue\",\n      );\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { node: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { node: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, { node: expr }, maybeName);\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: ?Position,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        Errors.ForInOfLoopInitializer,\n        { node: init },\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, { node: init }, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.raise(\n              Errors.DeclarationMissingInitializer,\n              { at: this.state.lastTokEndLoc },\n              \"Const declarations\",\n            );\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            { at: this.state.lastTokEndLoc },\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      \"variable declaration\",\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc,\n      });\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { node: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassProperty> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateProperty> = member;\n    const accessorProp: $FlowSubtype<N.ClassAccessorProperty> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          node: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { node: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { node: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { node: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { node: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { node: member });\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { node: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = (prop.key: N.Expression);\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { node: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              node: declaration,\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportedName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(\n                Errors.ExportBindingIsString,\n                { node: specifier },\n                local.value,\n                exportedName,\n              );\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, { node });\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        { node },\n        name,\n      );\n    }\n    this.exportedIdentifiers.add(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(\n          Errors.ModuleExportNameHasLoneSurrogate,\n          { node: result },\n          surrogate[0].charCodeAt(0).toString(16),\n        );\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          { at: this.state.startLoc },\n          keyName,\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(\n          Errors.ModuleAttributeDifferentFromType,\n          { node: node.key },\n          node.key.name,\n        );\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          { node: node.key },\n          node.key.name,\n        );\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: any,\n    importedIsString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(\n          Errors.ImportBindingIsString,\n          { node: specifier },\n          imported.value,\n        );\n      }\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { getExportedToken, tt as internalTokenTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"]},"metadata":{},"sourceType":"script"}