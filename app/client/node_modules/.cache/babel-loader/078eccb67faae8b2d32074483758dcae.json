{"ast":null,"code":"import { ActionTypes } from \"../action-types\";\nimport { signin as signinRoute, signup as signupRoute } from '../../api';\nimport localforage from \"localforage\";\nimport { AxiosError } from \"axios\";\n;\nexport const signin = signinParams => {\n  return async dispatch => {\n    dispatch({\n      type: ActionTypes.SIGNIN_LOADING\n    });\n\n    try {\n      const response = await signinRoute(signinParams);\n      await localforage.setItem('profile', JSON.stringify(response.data));\n      signinParams.toast.success(\"Login Succesfully!\");\n      signinParams.navigate('/');\n      dispatch({\n        type: ActionTypes.SIGN_IN,\n        payload: response.data\n      });\n    } catch (err) {\n      var _err$response;\n\n      const error = err instanceof AxiosError ? (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data.error : \"Could not contact server\";\n      dispatch({\n        type: ActionTypes.SIGNIN_ERROR,\n        payload: {\n          error\n        }\n      });\n    }\n  };\n};\nexport const signup = signupParams => {\n  return async dispatch => {\n    dispatch({\n      type: ActionTypes.SIGNUP_LOADING\n    });\n\n    try {\n      const {\n        data\n      } = await signupRoute(signupParams);\n      dispatch({\n        type: ActionTypes.SIGN_UP,\n        payload: data\n      });\n      signupParams.toast(\"Singup successfully\");\n      signupParams.navigate('/');\n    } catch (err) {\n      var _err$response2;\n\n      console.log(err.re);\n      const error = err instanceof AxiosError ? (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data.error : \"Could not contact server\";\n      dispatch({\n        type: ActionTypes.SIGNUP_ERROR,\n        payload: {\n          error\n        }\n      });\n    }\n  };\n};","map":{"version":3,"names":["ActionTypes","signin","signinRoute","signup","signupRoute","localforage","AxiosError","signinParams","dispatch","type","SIGNIN_LOADING","response","setItem","JSON","stringify","data","toast","success","navigate","SIGN_IN","payload","err","error","SIGNIN_ERROR","signupParams","SIGNUP_LOADING","SIGN_UP","console","log","re","SIGNUP_ERROR"],"sources":["/home/haziz1/react-projects/tour-app/client/src/states/action-creators/index.ts"],"sourcesContent":["import { ActionTypes } from \"../action-types\";\nimport { SigninActions } from '../actions/signin-action';\nimport { SignupActions } from \"../actions/signup-action\";\nimport { signin as signinRoute, signup as signupRoute } from '../../api'\nimport { Dispatch } from \"react\";\nimport localforage from \"localforage\";\nimport { NavigateFunction } from \"react-router-dom\";\nimport { toast as toastType } from \"react-toastify\";\nimport { AxiosError } from \"axios\";\n\n\ninterface AuthParams {\n    email: string;\n    password: string;\n    navigate: NavigateFunction;\n    toast: typeof toastType;\n}\n\ninterface SignupParams extends AuthParams {\n    name: string\n};\n\n\n\nexport const signin = (signinParams: AuthParams) => {\n    return async (dispatch: Dispatch<SigninActions>) => {\n        dispatch({\n            type: ActionTypes.SIGNIN_LOADING,\n        });\n        try {\n            const response = await signinRoute(signinParams)\n            await localforage.setItem('profile', JSON.stringify(response.data));\n            signinParams.toast.success(\"Login Succesfully!\");\n            signinParams.navigate('/');\n            dispatch({\n                type: ActionTypes.SIGN_IN,\n                payload: response.data\n            });\n        } catch (err) {\n            const error = err instanceof AxiosError ? err.response?.data.error : \"Could not contact server\";\n            dispatch({\n                type: ActionTypes.SIGNIN_ERROR,\n                payload: { error }\n            });\n        }\n    }\n}\n\n\n\nexport const signup = (signupParams: SignupParams) => {\n    return async (dispatch: Dispatch<SignupActions>) => {\n        dispatch({\n            type: ActionTypes.SIGNUP_LOADING\n        });\n        try {\n            const { data } = await signupRoute(signupParams);\n            dispatch({\n                type: ActionTypes.SIGN_UP,\n                payload: data\n            });\n            signupParams.toast(\"Singup successfully\");\n            signupParams.navigate('/');\n        } catch (err) {\n            console.log(err.re)\n            const error = err instanceof AxiosError ? err.response?.data.error : \"Could not contact server\";\n            dispatch({\n                type: ActionTypes.SIGNUP_ERROR,\n                payload: { error }\n            });\n        }\n    }\n}"],"mappings":"AAAA,SAASA,WAAT,QAA4B,iBAA5B;AAGA,SAASC,MAAM,IAAIC,WAAnB,EAAgCC,MAAM,IAAIC,WAA1C,QAA6D,WAA7D;AAEA,OAAOC,WAAP,MAAwB,aAAxB;AAGA,SAASC,UAAT,QAA2B,OAA3B;AAYC;AAID,OAAO,MAAML,MAAM,GAAIM,YAAD,IAA8B;EAChD,OAAO,MAAOC,QAAP,IAA6C;IAChDA,QAAQ,CAAC;MACLC,IAAI,EAAET,WAAW,CAACU;IADb,CAAD,CAAR;;IAGA,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMT,WAAW,CAACK,YAAD,CAAlC;MACA,MAAMF,WAAW,CAACO,OAAZ,CAAoB,SAApB,EAA+BC,IAAI,CAACC,SAAL,CAAeH,QAAQ,CAACI,IAAxB,CAA/B,CAAN;MACAR,YAAY,CAACS,KAAb,CAAmBC,OAAnB,CAA2B,oBAA3B;MACAV,YAAY,CAACW,QAAb,CAAsB,GAAtB;MACAV,QAAQ,CAAC;QACLC,IAAI,EAAET,WAAW,CAACmB,OADb;QAELC,OAAO,EAAET,QAAQ,CAACI;MAFb,CAAD,CAAR;IAIH,CATD,CASE,OAAOM,GAAP,EAAY;MAAA;;MACV,MAAMC,KAAK,GAAGD,GAAG,YAAYf,UAAf,oBAA4Be,GAAG,CAACV,QAAhC,kDAA4B,cAAcI,IAAd,CAAmBO,KAA/C,GAAuD,0BAArE;MACAd,QAAQ,CAAC;QACLC,IAAI,EAAET,WAAW,CAACuB,YADb;QAELH,OAAO,EAAE;UAAEE;QAAF;MAFJ,CAAD,CAAR;IAIH;EACJ,CApBD;AAqBH,CAtBM;AA0BP,OAAO,MAAMnB,MAAM,GAAIqB,YAAD,IAAgC;EAClD,OAAO,MAAOhB,QAAP,IAA6C;IAChDA,QAAQ,CAAC;MACLC,IAAI,EAAET,WAAW,CAACyB;IADb,CAAD,CAAR;;IAGA,IAAI;MACA,MAAM;QAAEV;MAAF,IAAW,MAAMX,WAAW,CAACoB,YAAD,CAAlC;MACAhB,QAAQ,CAAC;QACLC,IAAI,EAAET,WAAW,CAAC0B,OADb;QAELN,OAAO,EAAEL;MAFJ,CAAD,CAAR;MAIAS,YAAY,CAACR,KAAb,CAAmB,qBAAnB;MACAQ,YAAY,CAACN,QAAb,CAAsB,GAAtB;IACH,CARD,CAQE,OAAOG,GAAP,EAAY;MAAA;;MACVM,OAAO,CAACC,GAAR,CAAYP,GAAG,CAACQ,EAAhB;MACA,MAAMP,KAAK,GAAGD,GAAG,YAAYf,UAAf,qBAA4Be,GAAG,CAACV,QAAhC,mDAA4B,eAAcI,IAAd,CAAmBO,KAA/C,GAAuD,0BAArE;MACAd,QAAQ,CAAC;QACLC,IAAI,EAAET,WAAW,CAAC8B,YADb;QAELV,OAAO,EAAE;UAAEE;QAAF;MAFJ,CAAD,CAAR;IAIH;EACJ,CApBD;AAqBH,CAtBM"},"metadata":{},"sourceType":"module"}