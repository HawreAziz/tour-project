{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst assert = require('assert');\n\nconst intersection = require('./utils/intersection');\n\nconst recast = require('recast');\n\nconst union = require('./utils/union');\n\nconst astTypes = recast.types;\nvar types = astTypes.namedTypes;\nconst NodePath = astTypes.NodePath;\nconst Node = types.Node;\n/**\n * This represents a generic collection of node paths. It only has a generic\n * API to access and process the elements of the list. It doesn't know anything\n * about AST types.\n *\n * @mixes traversalMethods\n * @mixes mutationMethods\n * @mixes transformMethods\n * @mixes globalMethods\n */\n\nclass Collection {\n  /**\n   * @param {Array} paths An array of AST paths\n   * @param {Collection} parent A parent collection\n   * @param {Array} types An array of types all the paths in the collection\n   *  have in common. If not passed, it will be inferred from the paths.\n   * @return {Collection}\n   */\n  constructor(paths, parent, types) {\n    assert.ok(Array.isArray(paths), 'Collection is passed an array');\n    assert.ok(paths.every(p => p instanceof NodePath), 'Array contains only paths');\n    this._parent = parent;\n    this.__paths = paths;\n\n    if (types && !Array.isArray(types)) {\n      types = _toTypeArray(types);\n    } else if (!types || Array.isArray(types) && types.length === 0) {\n      types = _inferTypes(paths);\n    }\n\n    this._types = types.length === 0 ? _defaultType : types;\n  }\n  /**\n   * Returns a new collection containing the nodes for which the callback\n   * returns true.\n   *\n   * @param {function} callback\n   * @return {Collection}\n   */\n\n\n  filter(callback) {\n    return new this.constructor(this.__paths.filter(callback), this);\n  }\n  /**\n   * Executes callback for each node/path in the collection.\n   *\n   * @param {function} callback\n   * @return {Collection} The collection itself\n   */\n\n\n  forEach(callback) {\n    this.__paths.forEach((path, i, paths) => callback.call(path, path, i, paths));\n\n    return this;\n  }\n  /**\n   * Tests whether at-least one path passes the test implemented by the provided callback.\n   *\n   * @param {function} callback\n   * @return {boolean}\n   */\n\n\n  some(callback) {\n    return this.__paths.some((path, i, paths) => callback.call(path, path, i, paths));\n  }\n  /**\n   * Tests whether all paths pass the test implemented by the provided callback.\n   *\n   * @param {function} callback\n   * @return {boolean}\n   */\n\n\n  every(callback) {\n    return this.__paths.every((path, i, paths) => callback.call(path, path, i, paths));\n  }\n  /**\n   * Executes the callback for every path in the collection and returns a new\n   * collection from the return values (which must be paths).\n   *\n   * The callback can return null to indicate to exclude the element from the\n   * new collection.\n   *\n   * If an array is returned, the array will be flattened into the result\n   * collection.\n   *\n   * @param {function} callback\n   * @param {Type} type Force the new collection to be of a specific type\n   */\n\n\n  map(callback, type) {\n    const paths = [];\n    this.forEach(function (path) {\n      /*jshint eqnull:true*/\n      let result = callback.apply(path, arguments);\n      if (result == null) return;\n\n      if (!Array.isArray(result)) {\n        result = [result];\n      }\n\n      for (let i = 0; i < result.length; i++) {\n        if (paths.indexOf(result[i]) === -1) {\n          paths.push(result[i]);\n        }\n      }\n    });\n    return fromPaths(paths, this, type);\n  }\n  /**\n   * Returns the number of elements in this collection.\n   *\n   * @return {number}\n   */\n\n\n  size() {\n    return this.__paths.length;\n  }\n  /**\n   * Returns the number of elements in this collection.\n   *\n   * @return {number}\n   */\n\n\n  get length() {\n    return this.__paths.length;\n  }\n  /**\n   * Returns an array of AST nodes in this collection.\n   *\n   * @return {Array}\n   */\n\n\n  nodes() {\n    return this.__paths.map(p => p.value);\n  }\n\n  paths() {\n    return this.__paths;\n  }\n\n  getAST() {\n    if (this._parent) {\n      return this._parent.getAST();\n    }\n\n    return this.__paths;\n  }\n\n  toSource(options) {\n    if (this._parent) {\n      return this._parent.toSource(options);\n    }\n\n    if (this.__paths.length === 1) {\n      return recast.print(this.__paths[0], options).code;\n    } else {\n      return this.__paths.map(p => recast.print(p, options).code);\n    }\n  }\n  /**\n   * Returns a new collection containing only the element at position index.\n   *\n   * In case of a negative index, the element is taken from the end:\n   *\n   *   .at(0)  - first element\n   *   .at(-1) - last element\n   *\n   * @param {number} index\n   * @return {Collection}\n   */\n\n\n  at(index) {\n    return fromPaths(this.__paths.slice(index, index === -1 ? undefined : index + 1), this);\n  }\n  /**\n   * Proxies to NodePath#get of the first path.\n   *\n   * @param {string|number} ...fields\n   */\n\n\n  get() {\n    const path = this.__paths[0];\n\n    if (!path) {\n      throw Error('You cannot call \"get\" on a collection with no paths. ' + 'Instead, check the \"length\" property first to verify at least 1 path exists.');\n    }\n\n    return path.get.apply(path, arguments);\n  }\n  /**\n   * Returns the type(s) of the collection. This is only used for unit tests,\n   * I don't think other consumers would need it.\n   *\n   * @return {Array<string>}\n   */\n\n\n  getTypes() {\n    return this._types;\n  }\n  /**\n   * Returns true if this collection has the type 'type'.\n   *\n   * @param {Type} type\n   * @return {boolean}\n   */\n\n\n  isOfType(type) {\n    return !!type && this._types.indexOf(type.toString()) > -1;\n  }\n\n}\n/**\n * Given a set of paths, this infers the common types of all paths.\n * @private\n * @param {Array} paths An array of paths.\n * @return {Type} type An AST type\n */\n\n\nfunction _inferTypes(paths) {\n  let _types = [];\n\n  if (paths.length > 0 && Node.check(paths[0].node)) {\n    const nodeType = types[paths[0].node.type];\n    const sameType = paths.length === 1 || paths.every(path => nodeType.check(path.node));\n\n    if (sameType) {\n      _types = [nodeType.toString()].concat(astTypes.getSupertypeNames(nodeType.toString()));\n    } else {\n      // try to find a common type\n      _types = intersection(paths.map(path => astTypes.getSupertypeNames(path.node.type)));\n    }\n  }\n\n  return _types;\n}\n\nfunction _toTypeArray(value) {\n  value = !Array.isArray(value) ? [value] : value;\n  value = value.map(v => v.toString());\n\n  if (value.length > 1) {\n    return union([value].concat(intersection(value.map(_getSupertypeNames))));\n  } else {\n    return value.concat(_getSupertypeNames(value[0]));\n  }\n}\n\nfunction _getSupertypeNames(type) {\n  try {\n    return astTypes.getSupertypeNames(type);\n  } catch (error) {\n    if (error.message === '') {\n      // Likely the case that the passed type wasn't found in the definition\n      // list. Maybe a typo. ast-types doesn't throw a useful error in that\n      // case :(\n      throw new Error('\"' + type + '\" is not a known AST node type. Maybe a typo?');\n    }\n\n    throw error;\n  }\n}\n/**\n * Creates a new collection from an array of node paths.\n *\n * If type is passed, it will create a typed collection if such a collection\n * exists. The nodes or path values must be of the same type.\n *\n * Otherwise it will try to infer the type from the path list. If every\n * element has the same type, a typed collection is created (if it exists),\n * otherwise, a generic collection will be created.\n *\n * @ignore\n * @param {Array} paths An array of paths\n * @param {Collection} parent A parent collection\n * @param {Type} type An AST type\n * @return {Collection}\n */\n\n\nfunction fromPaths(paths, parent, type) {\n  assert.ok(paths.every(n => n instanceof NodePath), 'Every element in the array should be a NodePath');\n  return new Collection(paths, parent, type);\n}\n/**\n * Creates a new collection from an array of nodes. This is a convenience\n * method which converts the nodes to node paths first and calls\n *\n *    Collections.fromPaths(paths, parent, type)\n *\n * @ignore\n * @param {Array} nodes An array of AST nodes\n * @param {Collection} parent A parent collection\n * @param {Type} type An AST type\n * @return {Collection}\n */\n\n\nfunction fromNodes(nodes, parent, type) {\n  assert.ok(nodes.every(n => Node.check(n)), 'Every element in the array should be a Node');\n  return fromPaths(nodes.map(n => new NodePath(n)), parent, type);\n}\n\nconst CPt = Collection.prototype;\n/**\n * This function adds the provided methods to the prototype of the corresponding\n * typed collection. If no type is passed, the methods are added to\n * Collection.prototype and are available for all collections.\n *\n * @param {Object} methods Methods to add to the prototype\n * @param {Type=} type Optional type to add the methods to\n */\n\nfunction registerMethods(methods, type) {\n  for (const methodName in methods) {\n    if (!methods.hasOwnProperty(methodName)) {\n      return;\n    }\n\n    if (hasConflictingRegistration(methodName, type)) {\n      let msg = `There is a conflicting registration for method with name \"${methodName}\".\\nYou tried to register an additional method with `;\n\n      if (type) {\n        msg += `type \"${type.toString()}\".`;\n      } else {\n        msg += 'universal type.';\n      }\n\n      msg += '\\nThere are existing registrations for that method with ';\n      const conflictingRegistrations = CPt[methodName].typedRegistrations;\n\n      if (conflictingRegistrations) {\n        msg += `type ${Object.keys(conflictingRegistrations).join(', ')}.`;\n      } else {\n        msg += 'universal type.';\n      }\n\n      throw Error(msg);\n    }\n\n    if (!type) {\n      CPt[methodName] = methods[methodName];\n    } else {\n      type = type.toString();\n\n      if (!CPt.hasOwnProperty(methodName)) {\n        installTypedMethod(methodName);\n      }\n\n      var registrations = CPt[methodName].typedRegistrations;\n      registrations[type] = methods[methodName];\n      astTypes.getSupertypeNames(type).forEach(function (name) {\n        registrations[name] = false;\n      });\n    }\n  }\n}\n\nfunction installTypedMethod(methodName) {\n  if (CPt.hasOwnProperty(methodName)) {\n    throw new Error(`Internal Error: \"${methodName}\" method is already installed`);\n  }\n\n  const registrations = {};\n\n  function typedMethod() {\n    const types = Object.keys(registrations);\n\n    for (let i = 0; i < types.length; i++) {\n      const currentType = types[i];\n\n      if (registrations[currentType] && this.isOfType(currentType)) {\n        return registrations[currentType].apply(this, arguments);\n      }\n    }\n\n    throw Error(`You have a collection of type [${this.getTypes()}]. ` + `\"${methodName}\" is only defined for one of [${types.join('|')}].`);\n  }\n\n  typedMethod.typedRegistrations = registrations;\n  CPt[methodName] = typedMethod;\n}\n\nfunction hasConflictingRegistration(methodName, type) {\n  if (!type) {\n    return CPt.hasOwnProperty(methodName);\n  }\n\n  if (!CPt.hasOwnProperty(methodName)) {\n    return false;\n  }\n\n  const registrations = CPt[methodName] && CPt[methodName].typedRegistrations;\n\n  if (!registrations) {\n    return true;\n  }\n\n  type = type.toString();\n\n  if (registrations.hasOwnProperty(type)) {\n    return true;\n  }\n\n  return astTypes.getSupertypeNames(type.toString()).some(function (name) {\n    return !!registrations[name];\n  });\n}\n\nvar _defaultType = [];\n/**\n * Sets the default collection type. In case a collection is created form an\n * empty set of paths and no type is specified, we return a collection of this\n * type.\n *\n * @ignore\n * @param {Type} type\n */\n\nfunction setDefaultCollectionType(type) {\n  _defaultType = _toTypeArray(type);\n}\n\nexports.fromPaths = fromPaths;\nexports.fromNodes = fromNodes;\nexports.registerMethods = registerMethods;\nexports.hasConflictingRegistration = hasConflictingRegistration;\nexports.setDefaultCollectionType = setDefaultCollectionType;","map":{"version":3,"names":["assert","require","intersection","recast","union","astTypes","types","namedTypes","NodePath","Node","Collection","constructor","paths","parent","ok","Array","isArray","every","p","_parent","__paths","_toTypeArray","length","_inferTypes","_types","_defaultType","filter","callback","forEach","path","i","call","some","map","type","result","apply","arguments","indexOf","push","fromPaths","size","nodes","value","getAST","toSource","options","print","code","at","index","slice","undefined","get","Error","getTypes","isOfType","toString","check","node","nodeType","sameType","concat","getSupertypeNames","v","_getSupertypeNames","error","message","n","fromNodes","CPt","prototype","registerMethods","methods","methodName","hasOwnProperty","hasConflictingRegistration","msg","conflictingRegistrations","typedRegistrations","Object","keys","join","installTypedMethod","registrations","name","typedMethod","currentType","setDefaultCollectionType","exports"],"sources":["/home/haziz1/node_modules/jscodeshift/src/Collection.js"],"sourcesContent":["\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst intersection = require('./utils/intersection');\nconst recast = require('recast');\nconst union = require('./utils/union');\n\nconst astTypes = recast.types;\nvar types = astTypes.namedTypes;\nconst NodePath = astTypes.NodePath;\nconst Node = types.Node;\n\n/**\n * This represents a generic collection of node paths. It only has a generic\n * API to access and process the elements of the list. It doesn't know anything\n * about AST types.\n *\n * @mixes traversalMethods\n * @mixes mutationMethods\n * @mixes transformMethods\n * @mixes globalMethods\n */\nclass Collection {\n\n  /**\n   * @param {Array} paths An array of AST paths\n   * @param {Collection} parent A parent collection\n   * @param {Array} types An array of types all the paths in the collection\n   *  have in common. If not passed, it will be inferred from the paths.\n   * @return {Collection}\n   */\n  constructor(paths, parent, types) {\n    assert.ok(Array.isArray(paths), 'Collection is passed an array');\n    assert.ok(\n      paths.every(p => p instanceof NodePath),\n      'Array contains only paths'\n    );\n    this._parent = parent;\n    this.__paths = paths;\n    if (types && !Array.isArray(types)) {\n      types = _toTypeArray(types);\n    } else if (!types || Array.isArray(types) && types.length === 0) {\n      types = _inferTypes(paths);\n    }\n    this._types = types.length === 0 ? _defaultType : types;\n  }\n\n  /**\n   * Returns a new collection containing the nodes for which the callback\n   * returns true.\n   *\n   * @param {function} callback\n   * @return {Collection}\n   */\n  filter(callback) {\n    return new this.constructor(this.__paths.filter(callback), this);\n  }\n\n  /**\n   * Executes callback for each node/path in the collection.\n   *\n   * @param {function} callback\n   * @return {Collection} The collection itself\n   */\n  forEach(callback) {\n    this.__paths.forEach(\n      (path, i, paths) => callback.call(path, path, i, paths)\n    );\n    return this;\n  }\n\n  /**\n   * Tests whether at-least one path passes the test implemented by the provided callback.\n   *\n   * @param {function} callback\n   * @return {boolean}\n   */\n  some(callback) {\n    return this.__paths.some(\n      (path, i, paths) => callback.call(path, path, i, paths)\n    );\n  }\n\n  /**\n   * Tests whether all paths pass the test implemented by the provided callback.\n   *\n   * @param {function} callback\n   * @return {boolean}\n   */\n  every(callback) {\n    return this.__paths.every(\n      (path, i, paths) => callback.call(path, path, i, paths)\n    );\n  }\n\n  /**\n   * Executes the callback for every path in the collection and returns a new\n   * collection from the return values (which must be paths).\n   *\n   * The callback can return null to indicate to exclude the element from the\n   * new collection.\n   *\n   * If an array is returned, the array will be flattened into the result\n   * collection.\n   *\n   * @param {function} callback\n   * @param {Type} type Force the new collection to be of a specific type\n   */\n  map(callback, type) {\n    const paths = [];\n    this.forEach(function(path) {\n      /*jshint eqnull:true*/\n      let result = callback.apply(path, arguments);\n      if (result == null) return;\n      if (!Array.isArray(result)) {\n        result = [result];\n      }\n      for (let i = 0; i < result.length; i++) {\n        if (paths.indexOf(result[i]) === -1) {\n          paths.push(result[i]);\n        }\n      }\n    });\n    return fromPaths(paths, this, type);\n  }\n\n  /**\n   * Returns the number of elements in this collection.\n   *\n   * @return {number}\n   */\n  size() {\n    return this.__paths.length;\n  }\n\n  /**\n   * Returns the number of elements in this collection.\n   *\n   * @return {number}\n   */\n  get length() {\n    return this.__paths.length;\n  }\n\n  /**\n   * Returns an array of AST nodes in this collection.\n   *\n   * @return {Array}\n   */\n  nodes() {\n    return this.__paths.map(p => p.value);\n  }\n\n  paths() {\n    return this.__paths;\n  }\n\n  getAST() {\n    if (this._parent) {\n      return this._parent.getAST();\n    }\n    return this.__paths;\n  }\n\n  toSource(options) {\n    if (this._parent) {\n      return this._parent.toSource(options);\n    }\n    if (this.__paths.length === 1) {\n      return recast.print(this.__paths[0], options).code;\n    } else {\n      return this.__paths.map(p => recast.print(p, options).code);\n    }\n  }\n\n  /**\n   * Returns a new collection containing only the element at position index.\n   *\n   * In case of a negative index, the element is taken from the end:\n   *\n   *   .at(0)  - first element\n   *   .at(-1) - last element\n   *\n   * @param {number} index\n   * @return {Collection}\n   */\n  at(index) {\n    return fromPaths(\n      this.__paths.slice(\n        index,\n        index === -1 ? undefined : index + 1\n      ),\n      this\n    );\n  }\n\n  /**\n   * Proxies to NodePath#get of the first path.\n   *\n   * @param {string|number} ...fields\n   */\n  get() {\n    const path = this.__paths[0];\n    if (!path) {\n      throw Error(\n        'You cannot call \"get\" on a collection with no paths. ' +\n        'Instead, check the \"length\" property first to verify at least 1 path exists.'\n      );\n    }\n    return path.get.apply(path, arguments);\n  }\n\n  /**\n   * Returns the type(s) of the collection. This is only used for unit tests,\n   * I don't think other consumers would need it.\n   *\n   * @return {Array<string>}\n   */\n  getTypes() {\n    return this._types;\n  }\n\n  /**\n   * Returns true if this collection has the type 'type'.\n   *\n   * @param {Type} type\n   * @return {boolean}\n   */\n  isOfType(type) {\n    return !!type && this._types.indexOf(type.toString()) > -1;\n  }\n}\n\n/**\n * Given a set of paths, this infers the common types of all paths.\n * @private\n * @param {Array} paths An array of paths.\n * @return {Type} type An AST type\n */\nfunction _inferTypes(paths) {\n  let _types = [];\n\n  if (paths.length > 0 && Node.check(paths[0].node)) {\n    const nodeType = types[paths[0].node.type];\n    const sameType = paths.length === 1 ||\n      paths.every(path => nodeType.check(path.node));\n\n    if (sameType) {\n      _types = [nodeType.toString()].concat(\n        astTypes.getSupertypeNames(nodeType.toString())\n      );\n    } else {\n      // try to find a common type\n      _types = intersection(\n        paths.map(path => astTypes.getSupertypeNames(path.node.type))\n      );\n    }\n  }\n\n  return _types;\n}\n\nfunction _toTypeArray(value) {\n  value = !Array.isArray(value) ? [value] : value;\n  value = value.map(v => v.toString());\n  if (value.length > 1) {\n    return union(\n      [value].concat(intersection(value.map(_getSupertypeNames)))\n    );\n  } else {\n    return value.concat(_getSupertypeNames(value[0]));\n  }\n}\n\nfunction _getSupertypeNames(type) {\n  try {\n    return astTypes.getSupertypeNames(type);\n  } catch(error) {\n    if (error.message === '') {\n      // Likely the case that the passed type wasn't found in the definition\n      // list. Maybe a typo. ast-types doesn't throw a useful error in that\n      // case :(\n      throw new Error(\n        '\"' + type + '\" is not a known AST node type. Maybe a typo?'\n      );\n    }\n    throw error;\n  }\n}\n\n/**\n * Creates a new collection from an array of node paths.\n *\n * If type is passed, it will create a typed collection if such a collection\n * exists. The nodes or path values must be of the same type.\n *\n * Otherwise it will try to infer the type from the path list. If every\n * element has the same type, a typed collection is created (if it exists),\n * otherwise, a generic collection will be created.\n *\n * @ignore\n * @param {Array} paths An array of paths\n * @param {Collection} parent A parent collection\n * @param {Type} type An AST type\n * @return {Collection}\n */\nfunction fromPaths(paths, parent, type) {\n  assert.ok(\n    paths.every(n => n instanceof NodePath),\n    'Every element in the array should be a NodePath'\n  );\n\n  return new Collection(paths, parent, type);\n}\n\n/**\n * Creates a new collection from an array of nodes. This is a convenience\n * method which converts the nodes to node paths first and calls\n *\n *    Collections.fromPaths(paths, parent, type)\n *\n * @ignore\n * @param {Array} nodes An array of AST nodes\n * @param {Collection} parent A parent collection\n * @param {Type} type An AST type\n * @return {Collection}\n */\nfunction fromNodes(nodes, parent, type) {\n  assert.ok(\n    nodes.every(n => Node.check(n)),\n    'Every element in the array should be a Node'\n  );\n  return fromPaths(\n    nodes.map(n => new NodePath(n)),\n    parent,\n    type\n  );\n}\n\nconst CPt = Collection.prototype;\n\n/**\n * This function adds the provided methods to the prototype of the corresponding\n * typed collection. If no type is passed, the methods are added to\n * Collection.prototype and are available for all collections.\n *\n * @param {Object} methods Methods to add to the prototype\n * @param {Type=} type Optional type to add the methods to\n */\nfunction registerMethods(methods, type) {\n  for (const methodName in methods) {\n    if (!methods.hasOwnProperty(methodName)) {\n      return;\n    }\n    if (hasConflictingRegistration(methodName, type)) {\n      let msg = `There is a conflicting registration for method with name \"${methodName}\".\\nYou tried to register an additional method with `;\n\n      if (type) {\n        msg += `type \"${type.toString()}\".`\n      } else {\n        msg += 'universal type.'\n      }\n\n      msg += '\\nThere are existing registrations for that method with ';\n\n      const conflictingRegistrations = CPt[methodName].typedRegistrations;\n\n      if (conflictingRegistrations) {\n        msg += `type ${Object.keys(conflictingRegistrations).join(', ')}.`;\n      } else {\n        msg += 'universal type.';\n      }\n\n      throw Error(msg);\n    }\n    if (!type) {\n      CPt[methodName] = methods[methodName];\n    } else {\n      type = type.toString();\n      if (!CPt.hasOwnProperty(methodName)) {\n        installTypedMethod(methodName);\n      }\n      var registrations = CPt[methodName].typedRegistrations;\n      registrations[type] = methods[methodName];\n      astTypes.getSupertypeNames(type).forEach(function (name) {\n        registrations[name] = false;\n      });\n    }\n  }\n}\n\nfunction installTypedMethod(methodName) {\n  if (CPt.hasOwnProperty(methodName)) {\n    throw new Error(`Internal Error: \"${methodName}\" method is already installed`);\n  }\n\n  const registrations = {};\n\n  function typedMethod() {\n    const types = Object.keys(registrations);\n\n    for (let i = 0; i < types.length; i++) {\n      const currentType = types[i];\n      if (registrations[currentType] && this.isOfType(currentType)) {\n        return registrations[currentType].apply(this, arguments);\n      }\n    }\n\n    throw Error(\n      `You have a collection of type [${this.getTypes()}]. ` +\n      `\"${methodName}\" is only defined for one of [${types.join('|')}].`\n    );\n  }\n\n  typedMethod.typedRegistrations = registrations;\n\n  CPt[methodName] = typedMethod;\n}\n\nfunction hasConflictingRegistration(methodName, type) {\n  if (!type) {\n    return CPt.hasOwnProperty(methodName);\n  }\n\n  if (!CPt.hasOwnProperty(methodName)) {\n    return false;\n  }\n\n  const registrations = CPt[methodName] && CPt[methodName].typedRegistrations;\n\n  if (!registrations) {\n    return true;\n  }\n\n  type = type.toString();\n\n  if (registrations.hasOwnProperty(type)) {\n    return true;\n  }\n\n  return astTypes.getSupertypeNames(type.toString()).some(function (name) {\n    return !!registrations[name];\n  });\n}\n\nvar _defaultType = [];\n\n/**\n * Sets the default collection type. In case a collection is created form an\n * empty set of paths and no type is specified, we return a collection of this\n * type.\n *\n * @ignore\n * @param {Type} type\n */\nfunction setDefaultCollectionType(type) {\n  _defaultType = _toTypeArray(type);\n}\n\nexports.fromPaths = fromPaths;\nexports.fromNodes = fromNodes;\nexports.registerMethods = registerMethods;\nexports.hasConflictingRegistration = hasConflictingRegistration;\nexports.setDefaultCollectionType = setDefaultCollectionType;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}